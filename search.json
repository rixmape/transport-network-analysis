[
  {
    "objectID": "05-storm-swaths.html",
    "href": "05-storm-swaths.html",
    "title": "Storm Swaths Generation",
    "section": "",
    "text": "This notebook processes historical storm data to generate potential damage areas. It filters global storm tracks that entered the Philippine Area of Responsibility and creates swath geometries based on storm radius for those intersecting the Bicol network."
  },
  {
    "objectID": "05-storm-swaths.html#setup-environment",
    "href": "05-storm-swaths.html#setup-environment",
    "title": "Storm Swaths Generation",
    "section": "0 Setup environment",
    "text": "0 Setup environment\n\nimport os\n\nimport contextily as cx\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nimport osmnx as ox\nimport pandas as pd\nimport seaborn as sns\nfrom shapely.geometry import Point, Polygon, box\n\n\nBASE_PATH = \"./data\"\n\nBOUNDARIES_FILE = os.path.join(BASE_PATH, \"boundaries.gpkg\")\nTRANSPORT_NETWORK_FILE = os.path.join(BASE_PATH, \"merged_network_simplified.graphml\")\nSTORM_TRACKS_FILE = os.path.join(BASE_PATH, \"ibtracs.ALL.list.v04r01.csv\")"
  },
  {
    "objectID": "05-storm-swaths.html#load-storm-tracks-from-ibtracs",
    "href": "05-storm-swaths.html#load-storm-tracks-from-ibtracs",
    "title": "Storm Swaths Generation",
    "section": "1 Load storm tracks from IBTrACS",
    "text": "1 Load storm tracks from IBTrACS\n\ngdf_boundaries = gpd.read_file(BOUNDARIES_FILE)\ngdf_boundaries.head()\n\n\n\n\n\n\n\n\ntown\nprovince\ngeometry\n\n\n\n\n0\nBacacay\nAlbay\nMULTIPOLYGON (((123.84193 13.3341, 123.84204 1...\n\n\n1\nCamalig\nAlbay\nMULTIPOLYGON (((123.6559 13.06131, 123.65536 1...\n\n\n2\nDaraga\nAlbay\nMULTIPOLYGON (((123.71487 13.03995, 123.71474 ...\n\n\n3\nGuinobatan\nAlbay\nMULTIPOLYGON (((123.68355 13.25321, 123.67729 ...\n\n\n4\nJovellar\nAlbay\nMULTIPOLYGON (((123.6559 13.06131, 123.65568 1...\n\n\n\n\n\n\n\n\nusecols = [\"SID\", \"SEASON\", \"NATURE\", \"LAT\", \"LON\", \"TOKYO_R30_LONG\"]\ndf_storms = pd.read_csv(STORM_TRACKS_FILE, usecols=usecols, na_values=[\" \"])\n\nfor col in [\"SEASON\", \"LAT\", \"LON\", \"TOKYO_R30_LONG\"]:\n    df_storms[col] = pd.to_numeric(df_storms[col], errors=\"coerce\")\n\ndf_storms = df_storms.dropna(subset=[\"SID\", \"SEASON\", \"LAT\", \"LON\"])\nprint(f\"Loaded {df_storms['SID'].nunique()} unique storms and {len(df_storms)} total records.\")\n\n/tmp/ipykernel_24298/2726862864.py:2: DtypeWarning: Columns (1,8,9,51) have mixed types. Specify dtype option on import or set low_memory=False.\n  df_storms = pd.read_csv(STORM_TRACKS_FILE, usecols=usecols, na_values=[\" \"])\n\n\nLoaded 13460 unique storms and 718675 total records.\n\n\n\ngeometry = [Point(xy) for xy in zip(df_storms[\"LON\"], df_storms[\"LAT\"])]\ngdf_storms = gpd.GeoDataFrame(df_storms, geometry=geometry, crs=gdf_boundaries.crs)\ngdf_storms.head()\n\n\n\n\n\n\n\n\nSID\nSEASON\nNATURE\nLAT\nLON\nTOKYO_R30_LONG\ngeometry\n\n\n\n\n1\n1842298N11080\n1842.0\nNR\n10.9\n80.3\nNaN\nPOINT (80.3 10.9)\n\n\n2\n1842298N11080\n1842.0\nNR\n10.9\n79.8\nNaN\nPOINT (79.8 10.9)\n\n\n3\n1842298N11080\n1842.0\nNR\n10.8\n79.4\nNaN\nPOINT (79.4 10.8)\n\n\n4\n1842298N11080\n1842.0\nNR\n10.8\n78.9\nNaN\nPOINT (78.9 10.8)\n\n\n5\n1842298N11080\n1842.0\nNR\n10.8\n78.4\nNaN\nPOINT (78.4 10.8)"
  },
  {
    "objectID": "05-storm-swaths.html#filter-storms-along-par",
    "href": "05-storm-swaths.html#filter-storms-along-par",
    "title": "Storm Swaths Generation",
    "section": "2 Filter storms along PAR",
    "text": "2 Filter storms along PAR\n\npar_coords = [(120, 25), (135, 25), (135, 5), (115, 5), (115, 15), (120, 21), (120, 25)]\ngdf_par = gpd.GeoDataFrame([1], geometry=[Polygon(par_coords)], crs=gdf_boundaries.crs)\n\n\n_, ax = plt.subplots(figsize=(8, 8))\n\ngdf_par.plot(ax=ax, color=\"none\", edgecolor=\"firebrick\", linewidth=2)\n\nx_min, y_min, x_max, y_max = gdf_par.total_bounds\npadding = 0.5\nax.set_xlim(x_min - padding, x_max + padding)\nax.set_ylim(y_min - padding, y_max + padding)\n\ncx.add_basemap(ax, crs=gdf_boundaries.crs, source=cx.providers.CartoDB.Positron, attribution=\"\")\n\nplt.title(\"Philippine Area of Responsibility (PAR)\")\nplt.tight_layout()\nplt.axis(\"off\")\n\nfilepath = os.path.join(BASE_PATH, \"par_polygon.png\")\nplt.savefig(filepath, dpi=300, bbox_inches=\"tight\")\n\nplt.show()\n\n\n\n\n\n\n\n\n\nsids_in_par = gpd.sjoin(gdf_storms, gdf_par, how=\"inner\", predicate=\"within\")[\"SID\"].unique()\ngdf_storms_par = gdf_storms[gdf_storms[\"SID\"].isin(sids_in_par)]\ngdf_storms_par = gdf_storms_par[gdf_storms_par[\"NATURE\"] == \"TS\"]\n\nprint(f\"Found {len(gdf_storms_par['SID'].unique())} tropical storms that passed through the PAR.\")\n\nFound 2662 tropical storms that passed through the PAR.\n\n\n\n_, ax = plt.subplots(figsize=(8, 8))\n\ngdf_par.plot(ax=ax, color=\"none\", edgecolor=\"firebrick\", linewidth=2, zorder=3)\n\nx_min, y_min, x_max, y_max = gdf_par.total_bounds\npadding = 0.5\nax.set_xlim(x_min - padding, x_max + padding)\nax.set_ylim(y_min - padding, y_max + padding)\n\ncx.add_basemap(ax, crs=gdf_boundaries.crs, source=cx.providers.CartoDB.Positron, attribution=\"\")\n\nfor storm_id in gdf_storms_par[\"SID\"].unique():\n    track = gdf_storms_par[gdf_storms_par[\"SID\"] == storm_id]\n    ax.plot(track.geometry.x, track.geometry.y, marker=\"o\", linestyle=\"-\", markersize=1, alpha=0.4)\n\nmin_year, max_year = int(gdf_storms_par[\"SEASON\"].min()), int(gdf_storms_par[\"SEASON\"].max())\nplt.title(f\"Storms Along PAR ({min_year}-{max_year})\")\nplt.axis(\"off\")\nplt.tight_layout()\n\nfilepath = os.path.join(BASE_PATH, \"storm_tracks.png\")\nplt.savefig(filepath, dpi=300, bbox_inches=\"tight\")\n\nplt.show()"
  },
  {
    "objectID": "05-storm-swaths.html#generate-storm-swaths",
    "href": "05-storm-swaths.html#generate-storm-swaths",
    "title": "Storm Swaths Generation",
    "section": "3 Generate storm swaths",
    "text": "3 Generate storm swaths\n\nnmi_to_meter = 1852\ngdf_storms_par[\"RADIUS_M\"] = gdf_storms_par[\"TOKYO_R30_LONG\"] * nmi_to_meter\ngdf_storms_par[\"RADIUS_M\"] = gdf_storms_par.groupby(\"SID\")[\"RADIUS_M\"].ffill().bfill()\n\ngdf_storms_par = gdf_storms_par.to_crs(\"EPSG:32651\")\n\nswaths = []\nfor sid, storm_track in gdf_storms_par.groupby(\"SID\"):\n    storm_swath = storm_track.geometry.buffer(storm_track[\"RADIUS_M\"]).union_all()\n    swaths.append({\"SID\": sid, \"geometry\": storm_swath})\n\ngdf_storms_par = gdf_storms_par.to_crs(gdf_boundaries.crs)\n\ngdf_swaths = gpd.GeoDataFrame(swaths, crs=\"EPSG:32651\")\ngdf_swaths = gdf_swaths.to_crs(gdf_boundaries.crs)\n\ngdf_swaths[\"geometry\"] = gdf_swaths.geometry.buffer(0)  # Fix potential invalid geometries\n\ngdf_swaths.head()\n\n\n\n\n\n\n\n\nSID\ngeometry\n\n\n\n\n0\n1884177N17124\nPOLYGON ((119.6299 19.04741, 119.57688 18.9352...\n\n\n1\n1884186N16125\nPOLYGON ((115.02828 17.35736, 114.99692 17.360...\n\n\n2\n1884191N15127\nPOLYGON ((119.16419 22.39553, 119.11645 22.510...\n\n\n3\n1884201N18129\nPOLYGON ((120.66847 24.68557, 120.55177 24.746...\n\n\n4\n1884208N13127\nPOLYGON ((106.48286 15.99222, 106.36064 15.999...\n\n\n\n\n\n\n\n\n_, ax = plt.subplots(figsize=(8, 8))\n\ngdf_par.plot(ax=ax, color=\"none\", edgecolor=\"firebrick\", linewidth=2)\n\nx_min, y_min, x_max, y_max = gdf_par.total_bounds\npadding = 0.5\nax.set_xlim(x_min - padding, x_max + padding)\nax.set_ylim(y_min - padding, y_max + padding)\n\ncx.add_basemap(ax, crs=gdf_boundaries.crs, source=cx.providers.CartoDB.Positron)\n\nstorm_id = gdf_storms_par[\"SID\"].unique()[-3]\nswath = gdf_swaths[gdf_swaths[\"SID\"] == storm_id]\nswath.plot(ax=ax, color=\"red\", alpha=0.5)\n\ntrack = gdf_storms_par[gdf_storms_par[\"SID\"] == storm_id]\nax.plot(track.geometry.x, track.geometry.y, marker=\"o\", linestyle=\"-\", markersize=1, color=\"white\")\n\nplt.title(f\"Swath for Storm {storm_id}\")\nplt.axis(\"off\")\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\ndel gdf_storms, swaths"
  },
  {
    "objectID": "05-storm-swaths.html#filter-storms-that-intersect-the-transport-network",
    "href": "05-storm-swaths.html#filter-storms-that-intersect-the-transport-network",
    "title": "Storm Swaths Generation",
    "section": "4 Filter storms that intersect the transport network",
    "text": "4 Filter storms that intersect the transport network\n\ngraph_transport = ox.load_graphml(TRANSPORT_NETWORK_FILE)\ngdf_transport = ox.graph_to_gdfs(graph_transport, nodes=False)\ngdf_transport.head()\n\n\n\n\n\n\n\n\n\n\nosmid\nhighway\noneway\nreversed\nlength\nmode\ngeometry\nlanes\nname\nref\nbridge\nservice\nmaxspeed\naccess\nwidth\njunction\ntunnel\n\n\nu\nv\nkey\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n300744370\n2530205870\n0\n245920268\ntertiary\nFalse\n[False, True]\n903.402532\nroad\nLINESTRING (124.04017 11.76647, 124.03957 11.7...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n12758303623\n0\n289934621\ntertiary\nFalse\n[False, True]\n1174.859606\nroad\nLINESTRING (124.0277 11.75516, 124.02796 11.75...\n2\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n2934697711\n0\n1185807595\ntertiary\nFalse\n[False, True]\n217.508112\nroad\nLINESTRING (124.03235 11.76396, 124.03309 11.7...\n2\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n300744933\n2530203165\n0\n291446757\nsecondary\nFalse\nTrue\n142.887806\nroad\nLINESTRING (124.06395 11.76468, 124.06457 11.7...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n8292228841\n0\n291446757\nsecondary\nFalse\n[False, True]\n365.061260\nroad\nLINESTRING (124.0623 11.76751, 124.06249 11.76...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n\n\n\n\nxmin, ymin, xmax, ymax = gdf_boundaries.total_bounds\ncrop_box = box(xmin, ymin, xmax, ymax)\ngdf_swaths = gpd.clip(gdf_swaths, crop_box)\n\nintersecting_swath_ids = gpd.sjoin(gdf_swaths, gdf_transport, how=\"inner\", predicate=\"intersects\")[\n    \"SID\"\n].unique()\ngdf_swaths = gdf_swaths[gdf_swaths[\"SID\"].isin(intersecting_swath_ids)]\ngdf_storms_par = gdf_storms_par[gdf_storms_par[\"SID\"].isin(intersecting_swath_ids)]\n\nprint(f\"Filtered to {len(intersecting_swath_ids)} storms that intersect the Bicol transport network.\")\n\nFiltered to 671 storms that intersect the Bicol transport network.\n\n\n\nfig, ax = plt.subplots(figsize=(8, 8))\n\ngdf_par.plot(ax=ax, color=\"none\", edgecolor=\"firebrick\", linewidth=1.5, zorder=3)\ngdf_boundaries.plot(ax=ax, color=\"white\", edgecolor=\"white\", linewidth=0.1, zorder=4)\nsns.kdeplot(\n    x=gdf_storms_par.geometry.x,\n    y=gdf_storms_par.geometry.y,\n    ax=ax,\n    cmap=\"Reds\",\n    fill=True,\n    alpha=0.6,\n    zorder=2,\n    cbar=True,\n    cbar_kws={\n        \"label\": \"Storm Track Density\",\n        \"orientation\": \"horizontal\",\n        \"pad\": 0.01,\n        \"shrink\": 0.8,\n        \"ticks\": plt.matplotlib.ticker.MaxNLocator(5),\n    },\n)\n\nx_min_par, y_min_par, x_max_par, y_max_par = gdf_par.total_bounds\npadding = 0.5\nax.set_xlim(x_min_par - padding, x_max_par + padding)\nax.set_ylim(y_min_par - padding, y_max_par + padding)\n\ncx.add_basemap(\n    ax,\n    crs=gdf_boundaries.crs,\n    source=cx.providers.CartoDB.Positron,\n    attribution=\"\",\n    zorder=1,\n)\n\nmin_year, max_year = int(gdf_storms_par[\"SEASON\"].min()), int(gdf_storms_par[\"SEASON\"].max())\nax.set_title(f\"Density Heatmap of Storm Tracks in PAR ({min_year}-{max_year})\")\nax.set_axis_off()\n\nax_inset = fig.add_axes([0.58, 0.605, 0.25, 0.25])\n\ngdf_boundaries.plot(ax=ax_inset, color=\"none\", edgecolor=\"white\", linewidth=0.5, zorder=3)\nsns.kdeplot(\n    x=gdf_storms_par.geometry.x,\n    y=gdf_storms_par.geometry.y,\n    ax=ax_inset,\n    cmap=\"Reds\",\n    fill=True,\n    alpha=0.6,\n    zorder=2,\n)\n\nx_min_bicol, y_min_bicol, x_max_bicol, y_max_bicol = gdf_boundaries.total_bounds\ninset_padding = 0.2\nax_inset.set_xlim(x_min_bicol - inset_padding, x_max_bicol + inset_padding)\nax_inset.set_ylim(y_min_bicol - inset_padding, y_max_bicol + inset_padding)\n\ncx.add_basemap(\n    ax_inset,\n    crs=gdf_boundaries.crs,\n    source=cx.providers.CartoDB.Positron,\n    attribution=\"\",\n    zorder=1,\n)\nax_inset.set_xticks([])\nax_inset.set_yticks([])\nax_inset.set_xlabel(\"\")\nax_inset.set_ylabel(\"\")\nfor spine in ax_inset.spines.values():\n    spine.set_edgecolor(\"black\")\n    spine.set_linewidth(1)\n\nfilepath = os.path.join(BASE_PATH, \"storm_density_heatmap.png\")\nplt.savefig(filepath, dpi=300, bbox_inches=\"tight\")\nplt.show()"
  },
  {
    "objectID": "05-storm-swaths.html#save-data-into-file",
    "href": "05-storm-swaths.html#save-data-into-file",
    "title": "Storm Swaths Generation",
    "section": "6 Save data into file",
    "text": "6 Save data into file\n\nimg_dir = os.path.join(BASE_PATH, \"storm_swath_images\")\nos.makedirs(img_dir, exist_ok=True)\n\nfor sid in gdf_swaths[\"SID\"]:\n    swath = gdf_swaths[gdf_swaths[\"SID\"] == sid]\n    track = gdf_storms_par[gdf_storms_par[\"SID\"] == sid]\n\n    _, ax = plt.subplots(figsize=(8, 8))\n\n    gdf_boundaries.plot(ax=ax, color=\"none\", edgecolor=\"gray\", linewidth=1)\n    swath.plot(ax=ax, color=\"red\", alpha=0.5, zorder=1)\n    ax.plot(\n        track.geometry.x, track.geometry.y, marker=\"o\", linestyle=\"-\", markersize=1, color=\"white\", zorder=2\n    )\n\n    x_min, y_min, x_max, y_max = gdf_boundaries.total_bounds\n    padding = 0\n    ax.set_xlim(x_min - padding, x_max + padding)\n    ax.set_ylim(y_min - padding, y_max + padding)\n\n    cx.add_basemap(ax, crs=gdf_swaths.crs, source=cx.providers.CartoDB.Positron, attribution=\"\")\n\n    plt.title(f\"Storm Swath: {sid}\")\n    plt.axis(\"off\")\n    plt.tight_layout()\n\n    out_path = os.path.join(img_dir, f\"{sid}.png\")\n    plt.savefig(out_path, dpi=300, bbox_inches=\"tight\")\n    plt.close()\n\n\ndirpath = os.path.join(BASE_PATH, \"storm_swath_geometries\")\nos.makedirs(dirpath, exist_ok=True)\n\nfor index, row in gdf_swaths.iterrows():\n    sid = row[\"SID\"]\n    gdf_single_swath = gpd.GeoDataFrame([{\"SID\": sid, \"geometry\": row[\"geometry\"]}], crs=gdf_swaths.crs)\n    filepath = os.path.join(dirpath, f\"{sid}.gpkg\")\n    gdf_single_swath.to_file(filepath, driver=\"GPKG\")"
  },
  {
    "objectID": "03-network-metrics.html",
    "href": "03-network-metrics.html",
    "title": "Transport Network Properties",
    "section": "",
    "text": "This notebook analyzes the structural properties of the Bicol transport network. It computes node and edge centrality metrics to identify influential points and links, and also detects distinct network communities."
  },
  {
    "objectID": "03-network-metrics.html#preliminaries",
    "href": "03-network-metrics.html#preliminaries",
    "title": "Transport Network Properties",
    "section": "0 Preliminaries",
    "text": "0 Preliminaries\n\nimport os\nimport warnings\n\nimport contextily as cx\nimport geopandas as gpd\nimport igraph as ig\nimport matplotlib.pyplot as plt\nimport networkx as nx\nimport numpy as np\nimport osmnx as ox\nimport pandas as pd\nfrom matplotlib.axes import Axes\nfrom matplotlib.colors import LogNorm\nfrom matplotlib.lines import Line2D\nfrom matplotlib.ticker import FuncFormatter, LogLocator\n\nwarnings.filterwarnings(\"ignore\")\n\n\nBASE_PATH = \"./outputs\"\nGDF_BOUNDS = gpd.read_file(os.path.join(BASE_PATH, \"boundaries.gpkg\"))\nGRAPH_TRANSPORT = ox.load_graphml(os.path.join(BASE_PATH, \"merged_network_simplified.graphml\"))\n\n\ndef plot_with_basemap(\n    ax: Axes,\n    title: str,\n    filename: str = None,\n    padding: float = 0.1,\n    basemap: bool = True,\n) -&gt; None:\n    if basemap:\n        x_min, y_min, x_max, y_max = GDF_BOUNDS.total_bounds\n        ax.set_xlim(x_min - padding, x_max + padding)\n        ax.set_ylim(y_min - padding, y_max + padding)\n\n        cx.add_basemap(\n            ax,\n            crs=GDF_BOUNDS.crs,\n            source=cx.providers.CartoDB.Positron,\n            attribution=\"\",\n        )\n\n    ax.set_title(title)\n    ax.set_axis_off()\n    plt.tight_layout()\n\n    if filename:\n        filepath = os.path.join(BASE_PATH, filename)\n        plt.savefig(filepath, dpi=300, bbox_inches=\"tight\")\n\n    plt.show()\n\n\ndef plot_choropleth(\n    ax: Axes,\n    gdf: gpd.GeoDataFrame,\n    column: str,\n    title: str,\n    cmap: str,\n    filename: str = None,\n    basemap: bool = True,\n    cbar: bool = True,\n):\n    data = gdf[column].replace(0, np.nan).dropna()\n    vmin = max(data.min(), 1e-8)\n    vmax = data.max()\n\n    norm = LogNorm(vmin=vmin, vmax=vmax)\n\n    formatter = FuncFormatter(lambda x, _: f\"{x:.1e}\")\n    locator = LogLocator(base=10.0, numticks=3)\n\n    legend_kwds = {\n        \"label\": f\"Log-Scaled Average {' '.join(column.split('_')).title()}\",\n        \"orientation\": \"horizontal\",\n        \"pad\": 0.01,\n        \"shrink\": 0.5,\n        \"format\": formatter,\n        \"ticks\": locator.tick_values(vmin, vmax),\n    }\n\n    gdf.plot(\n        column=column,\n        ax=ax,\n        cmap=cmap,\n        edgecolor=\"white\",\n        linewidth=0.5,\n        legend=cbar,\n        legend_kwds=legend_kwds,\n        norm=norm,\n    )\n\n    plot_with_basemap(ax=ax, title=title, filename=filename, basemap=basemap)"
  },
  {
    "objectID": "03-network-metrics.html#analyze-node-distribution",
    "href": "03-network-metrics.html#analyze-node-distribution",
    "title": "Transport Network Properties",
    "section": "1 Analyze node distribution",
    "text": "1 Analyze node distribution\n\ngdf_nodes = ox.graph_to_gdfs(GRAPH_TRANSPORT, edges=False)[[\"geometry\"]]\ngdf_nodes = gpd.sjoin(gdf_nodes, GDF_BOUNDS, how=\"inner\", predicate=\"within\")\ngdf_nodes = gdf_nodes.drop(columns=[\"index_right\"])\ngdf_nodes.head()\n\n\n\n\n\n\n\n\ngeometry\ntown\nprovince\n\n\nosmid\n\n\n\n\n\n\n\n300744370\nPOINT (124.03376 11.76261)\nEsperanza\nMasbate\n\n\n300744933\nPOINT (124.06395 11.76468)\nPio V. Corpus\nMasbate\n\n\n300744970\nPOINT (124.05778 11.86383)\nPio V. Corpus\nMasbate\n\n\n300745522\nPOINT (123.90828 11.91029)\nPlacer\nMasbate\n\n\n300746507\nPOINT (123.99164 11.96455)\nCataingan\nMasbate\n\n\n\n\n\n\n\n\ndef compute_node_counts_by_town(\n    gdf_metrics: gpd.GeoDataFrame,\n    gdf_nodes: gpd.GeoDataFrame,\n    col: str = \"node_count\",\n) -&gt; pd.DataFrame:\n    df_node_counts = gdf_nodes.groupby([\"town\"]).size().reset_index(name=col)\n    return gdf_metrics.merge(df_node_counts, on=[\"town\"], how=\"left\")\n\n\ngdf_metrics = compute_node_counts_by_town(GDF_BOUNDS.copy(), gdf_nodes)\n\n\n_, ax = plt.subplots(figsize=(8, 8))\n\nplot_choropleth(\n    ax=ax,\n    gdf=gdf_metrics,\n    column=\"node_count\",\n    title=\"Node Distribution by Town\",\n    cmap=\"Greys\",\n    filename=\"node_count_map.png\",\n)\n\n\n\n\n\n\n\n\n\ndef networkx_to_igraph(nx_graph: nx.Graph) -&gt; ig.Graph:\n    nx_nodes = list(nx_graph.nodes)\n    node_index = {node: idx for idx, node in enumerate(nx_nodes)}\n\n    ig_edges = [(node_index[u], node_index[v]) for u, v in nx_graph.edges()]\n    graph = ig.Graph(edges=ig_edges, directed=False)\n    graph.vs[\"name\"] = [str(n) for n in nx_nodes]\n\n    return graph, list(node_index.keys())\n\n\ngraph_ig, node_index = networkx_to_igraph(GRAPH_TRANSPORT)\n\n\ndef get_communities(graph: ig.Graph) -&gt; pd.DataFrame:\n    communities = graph.community_multilevel()  # Uses multilevel (Louvain) algorithm\n    df_communities = pd.DataFrame(\n        {\n            \"osmid\": [int(v[\"name\"]) for v in graph.vs],\n            \"community_id\": communities.membership,\n        }\n    )\n    print(f\"Detected {len(communities)} communities.\")\n    return df_communities\n\n\ndef plot_communities_map(\n    gdf_nodes: gpd.GeoDataFrame,\n    df_communities: pd.DataFrame,\n) -&gt; None:\n    gdf_nodes_w_communities = gdf_nodes.reset_index().merge(df_communities, on=\"osmid\")\n\n    _, ax = plt.subplots(figsize=(8, 8))\n\n    GDF_BOUNDS.plot(ax=ax, color=\"none\", edgecolor=\"gray\", linewidth=1, zorder=2, alpha=0.5)\n\n    gdf_nodes_w_communities.plot(\n        column=\"community_id\",\n        categorical=True,\n        ax=ax,\n        markersize=3,\n        cmap=\"tab20\",\n        zorder=3,\n        alpha=0.5,\n    )\n\n    plot_with_basemap(\n        ax=ax,\n        title=\"Network Communities in the Bicol Transport System\",\n        filename=\"network_communities_map.png\",\n        basemap=True,\n    )\n\n\ndf_communities = get_communities(graph_ig)\nplot_communities_map(gdf_nodes, df_communities)\n\nDetected 250 communities."
  },
  {
    "objectID": "03-network-metrics.html#compute-centrality-metrics-for-all-nodes",
    "href": "03-network-metrics.html#compute-centrality-metrics-for-all-nodes",
    "title": "Transport Network Properties",
    "section": "2 Compute centrality metrics for all nodes",
    "text": "2 Compute centrality metrics for all nodes\n\ntry:\n    df_centrality = pd.read_csv(os.path.join(BASE_PATH, \"node_metrics.csv\"))\nexcept FileNotFoundError:\n    degree_raw = graph_ig.degree()\n    closeness_raw = graph_ig.closeness(normalized=True)\n    betweenness_raw = graph_ig.betweenness()\n\n    n = graph_ig.vcount()\n    degree_norm = [d / (n - 1) for d in degree_raw]\n    betweenness_norm = [b / ((n - 1) * (n - 2)) if n &gt; 2 else 0 for b in betweenness_raw]\n\n    centralities = {\n        \"osmid\": node_index,\n        \"degree\": degree_norm,\n        \"closeness\": closeness_raw,\n        \"betweenness\": betweenness_norm,\n    }\n\n    df_centrality = pd.DataFrame(centralities)\n\ndf_centrality.head()\n\n\n\n\n\n\n\n\nosmid\ndegree\ncloseness\nbetweenness\n\n\n\n\n0\n300744370\n0.000053\n0.003144\n0.001964\n\n\n1\n300744933\n0.000053\n0.003096\n0.001374\n\n\n2\n300744970\n0.000053\n0.003235\n0.000093\n\n\n3\n300745522\n0.000053\n0.003578\n0.001914\n\n\n4\n300746507\n0.000053\n0.003505\n0.001660\n\n\n\n\n\n\n\n\ndf_centrality.to_csv(os.path.join(BASE_PATH, \"node_metrics.csv\"), index=False)"
  },
  {
    "objectID": "03-network-metrics.html#compute-average-metrics-for-each-town",
    "href": "03-network-metrics.html#compute-average-metrics-for-each-town",
    "title": "Transport Network Properties",
    "section": "3 Compute average metrics for each town",
    "text": "3 Compute average metrics for each town\n\ndef get_town_metrics(\n    gdf_metrics: gpd.GeoDataFrame,\n    gdf_nodes: gpd.GeoDataFrame,\n    df_centrality: pd.DataFrame,\n) -&gt; gpd.GeoDataFrame:\n    df_merged = pd.merge(gdf_nodes, df_centrality, on=\"osmid\")\n    agg_metrics = {\"degree\": \"mean\", \"betweenness\": \"mean\", \"closeness\": \"mean\"}\n    df_town_metrics = df_merged.groupby([\"town\"]).agg(agg_metrics).reset_index()\n    cols = [\"town\", \"province\", \"degree\", \"betweenness\", \"closeness\", \"geometry\"]\n    return gdf_metrics.merge(df_town_metrics, on=[\"town\"])[cols]\n\n\ngdf_metrics = get_town_metrics(gdf_metrics, gdf_nodes, df_centrality)\n\n\n_, ax = plt.subplots(figsize=(8, 8))\n\nplot_choropleth(\n    ax=ax,\n    gdf=gdf_metrics,\n    column=\"degree\",\n    title=\"Average Degree Centrality\",\n    cmap=\"Greens\",\n    filename=\"degree_centrality_map.png\",\n)\n\n\n\n\n\n\n\n\n\n_, ax = plt.subplots(figsize=(8, 8))\n\nplot_choropleth(\n    ax=ax,\n    gdf=gdf_metrics,\n    column=\"betweenness\",\n    title=\"Average Betweenness Centrality\",\n    cmap=\"Oranges\",\n    filename=\"betweenness_centrality_map.png\",\n)\n\n\n\n\n\n\n\n\n\n_, ax = plt.subplots(figsize=(8, 8))\n\nplot_choropleth(\n    ax=ax,\n    gdf=gdf_metrics,\n    column=\"closeness\",\n    title=\"Average Closeness Centrality\",\n    cmap=\"Blues\",\n    filename=\"closeness_centrality_map.png\",\n)\n\n\n\n\n\n\n\n\n\ndef get_top_towns_by_centrality(\n    gdf_metrics: gpd.GeoDataFrame,\n    metric: str,\n    top_n: int = 20,\n) -&gt; pd.DataFrame:\n    return (\n        gdf_metrics.nlargest(top_n, metric)[[\"town\", \"province\", metric]]\n        .sort_values(by=metric, ascending=False)\n        .reset_index(drop=True)\n    )\n\n\ntop_degree_towns = get_top_towns_by_centrality(gdf_metrics, \"degree\")\ntop_betweenness_towns = get_top_towns_by_centrality(gdf_metrics, \"betweenness\")\ntop_closeness_towns = get_top_towns_by_centrality(gdf_metrics, \"closeness\")\n\nprint(\"Top Towns by Degree Centrality:\")\nprint(top_degree_towns)\n\nprint(\"\\nTop Towns by Betweenness Centrality:\")\nprint(top_betweenness_towns)\n\nprint(\"\\nTop Towns by Closeness Centrality:\")\nprint(top_closeness_towns)\n\nTop Towns by Degree Centrality:\n             town         province    degree\n0    Presentacion    Camarines Sur  0.000051\n1            Daet  Camarines Norte  0.000049\n2             Oas            Albay  0.000048\n3     San Jacinto          Masbate  0.000048\n4         Vinzons  Camarines Norte  0.000048\n5       Pio Duran            Albay  0.000048\n6       Naga City    Camarines Sur  0.000047\n7         Magarao    Camarines Sur  0.000047\n8      Panganiban      Catanduanes  0.000047\n9           Virac      Catanduanes  0.000047\n10  Santo Domingo            Albay  0.000047\n11    Prieto Diaz         Sorsogon  0.000046\n12        Bulusan         Sorsogon  0.000046\n13       Polangui            Albay  0.000046\n14      Caramoran      Catanduanes  0.000046\n15    San Vicente  Camarines Norte  0.000046\n16     San Andres      Catanduanes  0.000046\n17          Gubat         Sorsogon  0.000046\n18         Pandan      Catanduanes  0.000046\n19   Masbate City          Masbate  0.000046\n\nTop Towns by Betweenness Centrality:\n           town         province  betweenness\n0     Pio Duran            Albay     0.013651\n1     Minalabac    Camarines Sur     0.013362\n2         Libon            Albay     0.009209\n3      Pamplona    Camarines Sur     0.008416\n4          Mobo          Masbate     0.008157\n5       Monreal          Masbate     0.006978\n6      Jovellar            Albay     0.006812\n7       Balatan    Camarines Sur     0.006708\n8        Sagñay    Camarines Sur     0.006610\n9          Lupi    Camarines Sur     0.005266\n10      Sipocot    Camarines Sur     0.005161\n11       Milaor    Camarines Sur     0.005106\n12   Ligao City            Albay     0.005086\n13  San Jacinto          Masbate     0.004947\n14         Bato    Camarines Sur     0.004718\n15         Bato      Catanduanes     0.004718\n16     Libmanan    Camarines Sur     0.004528\n17        Basud  Camarines Norte     0.004446\n18       Manito            Albay     0.004393\n19       Gainza    Camarines Sur     0.004307\n\nTop Towns by Closeness Centrality:\n            town         province  closeness\n0   Garchitorena    Camarines Sur   0.055026\n1       Claveria          Masbate   0.047951\n2      Bagamanoc      Catanduanes   0.042953\n3        Monreal          Masbate   0.042692\n4      Rapu-Rapu            Albay   0.034115\n5       Milagros          Masbate   0.032388\n6     San Miguel      Catanduanes   0.032173\n7       Castilla         Sorsogon   0.031637\n8         Baleno          Masbate   0.030605\n9         Siruma    Camarines Sur   0.029557\n10   San Pascual          Masbate   0.028352\n11         Balud          Masbate   0.021489\n12      Caramoan    Camarines Sur   0.021380\n13       Lagonoy    Camarines Sur   0.020998\n14        Pandan      Catanduanes   0.019475\n15       Cawayan          Masbate   0.019248\n16       Malinao            Albay   0.017879\n17      Mercedes  Camarines Norte   0.016397\n18    Panganiban      Catanduanes   0.016139\n19           Oas            Albay   0.012644"
  },
  {
    "objectID": "03-network-metrics.html#analyze-edge-metrics",
    "href": "03-network-metrics.html#analyze-edge-metrics",
    "title": "Transport Network Properties",
    "section": "4 Analyze edge metrics",
    "text": "4 Analyze edge metrics\n\ndef get_edge_betweenness(nx_graph: nx.Graph, ig_graph: ig.Graph) -&gt; gpd.GeoDataFrame:\n    _, gdf_edges = ox.graph_to_gdfs(nx_graph)\n\n    edge_betweenness_raw = ig_graph.edge_betweenness()\n\n    n = ig_graph.vcount()\n    if n &gt; 2:\n        normalizing_factor = (n * (n - 1)) / 2\n        edge_betweenness_norm = [b / normalizing_factor for b in edge_betweenness_raw]\n    else:\n        edge_betweenness_norm = [0] * len(edge_betweenness_raw)\n\n    gdf_edges[\"edge_betweenness\"] = edge_betweenness_norm\n\n    print(f\"Computed edge betweenness for {len(gdf_edges)} edges.\")\n    return gdf_edges\n\n\ndef plot_edge_betweenness_map(gdf_edges: gpd.GeoDataFrame) -&gt; None:\n    criticality_percentile = 0.99\n    betweenness_threshold = gdf_edges[\"edge_betweenness\"].quantile(criticality_percentile)\n    gdf_critical_edges = gdf_edges[gdf_edges[\"edge_betweenness\"] &gt;= betweenness_threshold]\n\n    print(\n        f\"Identified {len(gdf_critical_edges)} critical edges (top {100 - criticality_percentile*100:.1f}%) \"\n        f\"with betweenness &gt;= {betweenness_threshold:.6f}\"\n    )\n\n    _, ax = plt.subplots(figsize=(10, 10))\n\n    gdf_edges.plot(ax=ax, linewidth=0.5, edgecolor=\"#d3d3d3\", zorder=2)\n    gdf_critical_edges.plot(ax=ax, linewidth=1.5, edgecolor=\"crimson\", zorder=3)\n    GDF_BOUNDS.plot(ax=ax, color=\"none\", edgecolor=\"black\", linewidth=1.0, zorder=4, alpha=0.6)\n    cx.add_basemap(ax, crs=gdf_edges.crs, source=cx.providers.CartoDB.Positron, attribution=\"\", zorder=1)\n\n    legend_elements = [\n        Line2D([0], [0], color=\"#d3d3d3\", lw=1, label=\"Transport Network\"),\n        Line2D(\n            [0],\n            [0],\n            color=\"crimson\",\n            lw=2,\n            label=f\"Critical Edges (Top {100-criticality_percentile*100:.1f}%)\",\n        ),\n        Line2D([0], [0], color=\"black\", lw=1, label=\"Town Boundaries\"),\n    ]\n    ax.legend(handles=legend_elements, loc=\"upper right\")\n\n    ax.set_title(\"Critical Transport Links by Edge Betweenness Centrality\", fontsize=14)\n    ax.set_axis_off()\n    plt.tight_layout()\n\n    filepath = os.path.join(BASE_PATH, \"edge_betweenness_map.png\")\n    plt.savefig(filepath, dpi=300, bbox_inches=\"tight\")\n    plt.show()\n\n\ngdf_edges_centrality = get_edge_betweenness(GRAPH_TRANSPORT, graph_ig)\nplot_edge_betweenness_map(gdf_edges_centrality)\n\nComputed edge betweenness for 71895 edges.\nIdentified 719 critical edges (top 1.0%) with betweenness &gt;= 0.065309\n\n\n\n\n\n\n\n\n\n\n# --- Code Cell 16 ---\ndef get_critical_edges(gdf_edges: gpd.GeoDataFrame) -&gt; gpd.GeoDataFrame:\n    \"\"\"Filters edges to include only those considered 'critical' based on a percentile.\"\"\"\n    criticality_percentile = 0.99\n    betweenness_threshold = gdf_edges[\"edge_betweenness\"].quantile(criticality_percentile)\n    return gdf_edges[gdf_edges[\"edge_betweenness\"] &gt;= betweenness_threshold]\n\n\ndef count_critical_edges_by_town(\n    gdf_critical_edges: gpd.GeoDataFrame, gdf_boundaries: gpd.GeoDataFrame\n) -&gt; pd.DataFrame:\n    \"\"\"Counts the number of critical edges within each town by performing a spatial join.\"\"\"\n    # The sjoin operation finds which town each edge intersects with\n    gdf_located_edges = gpd.sjoin(gdf_critical_edges, gdf_boundaries, how=\"inner\", predicate=\"intersects\")\n\n    # Group by both province and town, then count the number of edges\n    df_counts = gdf_located_edges.groupby([\"province\", \"town\"]).size().reset_index(name=\"critical_edge_count\")\n\n    # Sort the results to find the towns with the most critical edges\n    df_counts = df_counts.sort_values(by=\"critical_edge_count\", ascending=False)\n\n    return df_counts\n\n\n# Identify critical edges from the centrality analysis\ngdf_critical_edges = get_critical_edges(gdf_edges_centrality)\n\n# Count the critical edges per town and include the province\ndf_critical_edge_counts = count_critical_edges_by_town(gdf_critical_edges, GDF_BOUNDS)\n\n# Print the top 20 results\nprint(\"--- Top 20 Towns with Most Critical Edges ---\")\nprint(df_critical_edge_counts.head(20).to_string(index=False))\n\n--- Top 20 Towns with Most Critical Edges ---\n       province         town  critical_edge_count\n          Albay   Ligao City                   62\n          Albay  Tabaco City                   54\n  Camarines Sur     Libmanan                   53\nCamarines Norte        Basud                   49\n  Camarines Sur    Minalabac                   38\n        Masbate         Mobo                   38\n          Albay    Pio Duran                   35\n          Albay       Daraga                   32\n  Camarines Sur     Pamplona                   31\n  Camarines Sur San Fernando                   30\n  Camarines Sur      Sipocot                   26\n          Albay        Libon                   23\n  Camarines Sur         Lupi                   22\n  Camarines Sur    Calabanga                   20\n        Masbate         Uson                   19\n  Camarines Sur     Tinambac                   19\n        Masbate      Monreal                   18\n          Albay Legazpi City                   18\n        Masbate  San Jacinto                   17\n  Camarines Sur         Bato                   17"
  },
  {
    "objectID": "09-critical-infrastructure.html",
    "href": "09-critical-infrastructure.html",
    "title": "Critical Road Infrastructure",
    "section": "",
    "text": "This notebook identifies and analyzes the most critical parts of the transport network. It pinpoints nodes with the highest betweenness centrality and then maps their distribution across provinces and towns."
  },
  {
    "objectID": "09-critical-infrastructure.html#setup-environment",
    "href": "09-critical-infrastructure.html#setup-environment",
    "title": "Critical Road Infrastructure",
    "section": "0 Setup environment",
    "text": "0 Setup environment\n\nimport os\nimport warnings\n\nimport contextily as cx\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nimport networkx as nx\nimport osmnx as ox\nimport pandas as pd\n\nwarnings.filterwarnings(\"ignore\")\n\n\nBASE_PATH = \"data\"\nBOUNDARIES_FILE = os.path.join(BASE_PATH, \"boundaries.gpkg\")\nTRANSPORT_NETWORK_FILE = os.path.join(BASE_PATH, \"merged_network_weighted.graphml\")\nCENTRALITY_FILE = os.path.join(BASE_PATH, \"centrality_measures.csv\")"
  },
  {
    "objectID": "09-critical-infrastructure.html#load-baseline-data",
    "href": "09-critical-infrastructure.html#load-baseline-data",
    "title": "Critical Road Infrastructure",
    "section": "1 Load baseline data",
    "text": "1 Load baseline data\n\ndf_centrality = pd.read_csv(CENTRALITY_FILE).set_index(\"osmid\")\ndf_centrality.head()\n\n\n\n\n\n\n\n\ndegree\ncloseness\nbetweenness\n\n\nosmid\n\n\n\n\n\n\n\n300744370\n0.000053\n0.003119\n0.003929\n\n\n300744933\n0.000053\n0.003071\n0.002748\n\n\n300744970\n0.000053\n0.003209\n0.000208\n\n\n300745522\n0.000053\n0.003549\n0.003817\n\n\n300746507\n0.000053\n0.003476\n0.003332\n\n\n\n\n\n\n\n\ngraph_transport = ox.load_graphml(TRANSPORT_NETWORK_FILE)\ngdf_nodes = ox.graph_to_gdfs(graph_transport, edges=False)\ngdf_nodes = gdf_nodes[[\"geometry\"]]\ngdf_nodes.head()\n\n\n\n\n\n\n\n\ngeometry\n\n\nosmid\n\n\n\n\n\n300744370\nPOINT (124.03376 11.76261)\n\n\n300744933\nPOINT (124.06395 11.76468)\n\n\n300744970\nPOINT (124.05778 11.86383)\n\n\n300745522\nPOINT (123.90828 11.91029)\n\n\n300746507\nPOINT (123.99164 11.96455)\n\n\n\n\n\n\n\n\ngdf_nodes = gdf_nodes.join(df_centrality)\nprint(f\"Loaded {len(gdf_nodes)} nodes with centrality measures.\")\ngdf_nodes.head()\n\nLoaded 56932 nodes with centrality measures.\n\n\n\n\n\n\n\n\n\ngeometry\ndegree\ncloseness\nbetweenness\n\n\nosmid\n\n\n\n\n\n\n\n\n300744370\nPOINT (124.03376 11.76261)\n0.000053\n0.003119\n0.003929\n\n\n300744933\nPOINT (124.06395 11.76468)\n0.000053\n0.003071\n0.002748\n\n\n300744970\nPOINT (124.05778 11.86383)\n0.000053\n0.003209\n0.000208\n\n\n300745522\nPOINT (123.90828 11.91029)\n0.000053\n0.003549\n0.003817\n\n\n300746507\nPOINT (123.99164 11.96455)\n0.000053\n0.003476\n0.003332\n\n\n\n\n\n\n\n\nCRITICALITY_PERCENTILE = 0.95  # Define \"critical\" as the top 5% of nodes based on betweenness centrality\n\nbetweenness_threshold = gdf_nodes[\"betweenness\"].quantile(CRITICALITY_PERCENTILE)\ngdf_critical_nodes = gdf_nodes[gdf_nodes[\"betweenness\"] &gt;= betweenness_threshold]\n\nf\"Identified {len(gdf_critical_nodes)} critical nodes (top {100-CRITICALITY_PERCENTILE*100:.0f}%) with betweenness &gt;= {betweenness_threshold:.6f}\"\n\n'Identified 2847 critical nodes (top 5%) with betweenness &gt;= 0.014295'\n\n\n\ngdf_boundaries = gpd.read_file(BOUNDARIES_FILE)\n_, gdf_edges = ox.graph_to_gdfs(graph_transport)"
  },
  {
    "objectID": "09-critical-infrastructure.html#identify-critical-nodes",
    "href": "09-critical-infrastructure.html#identify-critical-nodes",
    "title": "Critical Road Infrastructure",
    "section": "2 Identify critical nodes",
    "text": "2 Identify critical nodes\n\nfig, ax = plt.subplots(1, 1, figsize=(8, 8))\n\ngdf_boundaries.plot(\n    ax=ax,\n    edgecolor=\"gray\",\n    facecolor=\"none\",\n    linewidth=1.0,\n    alpha=0.7,\n    zorder=2,\n    label=\"Town Boundaries\",\n)\ngdf_edges.plot(\n    ax=ax,\n    linewidth=0.5,\n    edgecolor=\"#d3d3d3\",\n    alpha=0.8,\n    zorder=1,\n    label=\"Transport Network\",\n)\n\ngdf_critical_nodes.plot(\n    ax=ax,\n    marker=\"o\",\n    color=\"firebrick\",\n    markersize=10,\n    zorder=3,\n    label=f\"Critical Nodes\\nTop {100-CRITICALITY_PERCENTILE*100:.0f}% Betweenness\",\n)\n\ncx.add_basemap(ax, crs=gdf_boundaries.crs, source=cx.providers.CartoDB.Positron, attribution=\"\")\n\nax.set_title(\"Critical Infrastructure Nodes in Bicol Region\")\nax.set_axis_off()\nax.legend(loc=\"upper right\", prop={\"size\": 10})\nplt.tight_layout()\n\nfilepath = os.path.join(BASE_PATH, \"critical_infrastructure_map.png\")\nplt.savefig(filepath, dpi=300, bbox_inches=\"tight\")\n\nplt.show()"
  },
  {
    "objectID": "09-critical-infrastructure.html#analyze-distribution-of-critical-nodes",
    "href": "09-critical-infrastructure.html#analyze-distribution-of-critical-nodes",
    "title": "Critical Road Infrastructure",
    "section": "3 Analyze distribution of critical nodes",
    "text": "3 Analyze distribution of critical nodes\n\ngdf_critical_nodes_located = gpd.sjoin(gdf_critical_nodes, gdf_boundaries, how=\"inner\", predicate=\"within\")\ngdf_critical_nodes_located.head()\n\n\n\n\n\n\n\n\ngeometry\ndegree\ncloseness\nbetweenness\nindex_right\ntown\nprovince\n\n\nosmid\n\n\n\n\n\n\n\n\n\n\n\n300750509\nPOINT (123.96609 11.94667)\n0.000053\n0.003525\n0.017540\n82\nCataingan\nMasbate\n\n\n352385867\nPOINT (123.893 11.94182)\n0.000070\n0.003612\n0.022548\n94\nPlacer\nMasbate\n\n\n1783355398\nPOINT (123.93129 11.91621)\n0.000053\n0.003549\n0.017973\n94\nPlacer\nMasbate\n\n\n1783355566\nPOINT (123.92514 11.92446)\n0.000053\n0.003562\n0.017986\n94\nPlacer\nMasbate\n\n\n1783355816\nPOINT (123.92134 11.93063)\n0.000053\n0.003574\n0.018054\n94\nPlacer\nMasbate\n\n\n\n\n\n\n\n\ndf_province_counts = gdf_critical_nodes_located[\"province\"].value_counts().reset_index()\ndf_province_counts.columns = [\"province\", \"critical_node_count\"]\n\nfilepath = os.path.join(BASE_PATH, \"critical_nodes_by_province.csv\")\ndf_province_counts.to_csv(filepath, index=False)\n\nprint(\"--- Critical Nodes per Province ---\")\nprint(df_province_counts)\n\n--- Critical Nodes per Province ---\n          province  critical_node_count\n0    Camarines Sur                  993\n1            Albay                  819\n2          Masbate                  305\n3         Sorsogon                  268\n4  Camarines Norte                  207\n5      Catanduanes                  169\n\n\n\nfig, ax = plt.subplots(1, 1, figsize=(8, 8))\n\ngdf_provinces = gdf_boundaries.dissolve(by=\"province\", aggfunc=\"sum\")\ngdf_provinces = gdf_provinces.merge(df_province_counts, on=\"province\")\n\ngdf_provinces.plot(\n    column=\"critical_node_count\",\n    ax=ax,\n    legend=True,\n    legend_kwds={\n        \"label\": \"Number of Critical Nodes\",\n        \"orientation\": \"horizontal\",\n        \"pad\": 0.01,\n        \"shrink\": 0.5,\n    },\n    cmap=\"OrRd\",\n    edgecolor=\"white\",\n    linewidth=0.5,\n)\n\ncx.add_basemap(\n    ax,\n    crs=gdf_provinces.crs,\n    source=cx.providers.CartoDB.Positron,\n    attribution=\"\",\n)\n\nax.set_title(\"Distribution of Critical Transport Nodes by Province\")\nax.set_axis_off()\nplt.tight_layout()\n\nfilepath = os.path.join(BASE_PATH, \"critical_nodes_choropleth_province.png\")\nplt.savefig(filepath, dpi=300, bbox_inches=\"tight\")\n\nplt.show()\n\n\n\n\n\n\n\n\n\ndf_town_counts = gdf_critical_nodes_located[\"town\"].value_counts().reset_index()\ndf_town_counts.columns = [\"town\", \"critical_node_count\"]\n\nfilepath = os.path.join(BASE_PATH, \"critical_nodes_by_town.csv\")\ndf_town_counts.to_csv(filepath, index=False)\n\nprint(\"\\n--- Top 15 Towns with Most Critical Nodes ---\")\nprint(df_town_counts.head(15))\n\n\n--- Top 15 Towns with Most Critical Nodes ---\n             town  critical_node_count\n0    Legazpi City                  120\n1    Masbate City                  110\n2     Tabaco City                  100\n3          Daraga                   90\n4   Sorsogon City                   87\n5      Guinobatan                   81\n6      Iriga City                   79\n7           Bulan                   77\n8         Camalig                   77\n9      Ligao City                   72\n10      Minalabac                   72\n11     San Andres                   70\n12          Basud                   70\n13      Calabanga                   66\n14       Tinambac                   57\n\n\n\nfig, ax = plt.subplots(1, 1, figsize=(8, 8))\n\ngdf_towns_counts = gdf_boundaries.merge(df_town_counts, on=\"town\")\n\ngdf_towns_counts.plot(\n    column=\"critical_node_count\",\n    ax=ax,\n    legend=True,\n    legend_kwds={\n        \"label\": \"Number of Critical Nodes\",\n        \"orientation\": \"horizontal\",\n        \"pad\": 0.01,\n        \"shrink\": 0.5,\n    },\n    cmap=\"OrRd\",\n    edgecolor=\"white\",\n    linewidth=0.5,\n)\n\ncx.add_basemap(\n    ax,\n    crs=gdf_towns_counts.crs,\n    source=cx.providers.CartoDB.Positron,\n    attribution=\"\",\n)\n\nax.set_title(\"Distribution of Critical Transport Nodes by Town\")\nax.set_axis_off()\nplt.tight_layout()\n\nfilepath = os.path.join(BASE_PATH, \"critical_nodes_choropleth_town.png\")\nplt.savefig(filepath, dpi=300, bbox_inches=\"tight\")\n\nplt.show()"
  },
  {
    "objectID": "02-transport-network.html",
    "href": "02-transport-network.html",
    "title": "Road and Ferry Transport Network of Bicol Region",
    "section": "",
    "text": "This notebook builds a multi-modal transport network for the Bicol Region. It downloads road and ferry data from OpenStreetMap, merges them into a single graph, and performs an initial accessibility analysis from Legazpi City."
  },
  {
    "objectID": "02-transport-network.html#preliminaries",
    "href": "02-transport-network.html#preliminaries",
    "title": "Road and Ferry Transport Network of Bicol Region",
    "section": "0 Preliminaries",
    "text": "0 Preliminaries\n\nimport os\nimport warnings\n\nimport contextily as cx\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nimport networkx as nx\nimport osmnx as ox\nimport pandas as pd\nfrom geopy.distance import geodesic\nfrom matplotlib.axes import Axes\nfrom scipy.spatial import cKDTree\n\nwarnings.filterwarnings(\"ignore\")\n\n\nBASE_PATH = os.path.join(\".\", \"outputs\")\nGDF_BOUNDS = gpd.read_file(os.path.join(BASE_PATH, \"boundaries.gpkg\"))\n\nORIGIN_TOWN = \"Legazpi City\"\n\n\ndef plot_with_basemap(\n    ax: Axes,\n    title: str,\n    filename: str = None,\n    padding: float = 0.1,\n) -&gt; None:\n    x_min, y_min, x_max, y_max = GDF_BOUNDS.total_bounds\n    ax.set_xlim(x_min - padding, x_max + padding)\n    ax.set_ylim(y_min - padding, y_max + padding)\n\n    cx.add_basemap(\n        ax,\n        crs=GDF_BOUNDS.crs,\n        source=cx.providers.CartoDB.Positron,\n        attribution=\"\",\n    )\n\n    ax.set_title(title)\n    ax.set_axis_off()\n    plt.tight_layout()\n\n    if filename:\n        filepath = os.path.join(BASE_PATH, filename)\n        plt.savefig(filepath, dpi=300, bbox_inches=\"tight\")\n\n    plt.show()\n\n\ndef get_labeled_undirected_graph(\n    G: nx.MultiDiGraph,\n    mode: str,\n) -&gt; nx.MultiGraph:\n    G = G.to_undirected()\n\n    for _, data in G.nodes(data=True):\n        data[\"mode\"] = mode\n    for _, _, data in G.edges(data=True):\n        data[\"mode\"] = mode\n\n    return G"
  },
  {
    "objectID": "02-transport-network.html#generate-road-network",
    "href": "02-transport-network.html#generate-road-network",
    "title": "Road and Ferry Transport Network of Bicol Region",
    "section": "1 Generate road network",
    "text": "1 Generate road network\n\ngraph_roads = ox.graph_from_place(\n    \"Bicol Region\",\n    network_type=\"drive_service\",\n    simplify=False,\n    retain_all=True,\n)\n\ngraph_roads = get_labeled_undirected_graph(graph_roads, \"road\")\n\nlen(graph_roads.nodes), len(graph_roads.edges)\n\n(446869, 460990)\n\n\n\n_, ax = plt.subplots(figsize=(8, 8))\n\nox.plot_graph(\n    graph_roads,\n    ax=ax,\n    node_size=0,\n    edge_color=\"seagreen\",\n    edge_linewidth=0.5,\n    show=False,\n    close=False,\n)\n\nplot_with_basemap(\n    ax,\n    title=\"Bicol Road Network\",\n    filename=\"road_network.png\",\n)\n\n\n\n\n\n\n\n\n\nfilepath = os.path.join(BASE_PATH, \"road_network.graphml\")\nox.save_graphml(graph_roads, filepath=filepath)"
  },
  {
    "objectID": "02-transport-network.html#initial-road-only-accessibility-analysis",
    "href": "02-transport-network.html#initial-road-only-accessibility-analysis",
    "title": "Road and Ferry Transport Network of Bicol Region",
    "section": "3 Initial road-only accessibility analysis",
    "text": "3 Initial road-only accessibility analysis\n\ndef get_accessible_towns(\n    graph: nx.Graph,\n) -&gt; pd.Series:\n    orig_geom = GDF_BOUNDS[GDF_BOUNDS[\"town\"] == ORIGIN_TOWN].union_all()\n    orig_point = orig_geom.centroid\n    orig_node = ox.nearest_nodes(graph, orig_point.x, orig_point.y)\n\n    reach_nodes = {orig_node} | nx.descendants(graph, orig_node)\n    reach_graph = graph.subgraph(reach_nodes)\n    gdf_reach_edges = ox.graph_to_gdfs(reach_graph, nodes=False, edges=True)\n\n    if gdf_reach_edges.empty:\n        reach_towns = set()\n    else:\n        gdf_reachable_towns = gpd.sjoin(\n            GDF_BOUNDS,\n            gdf_reach_edges,\n            how=\"inner\",\n            predicate=\"intersects\",\n        )\n        reach_towns = set(gdf_reachable_towns[\"town\"].unique())\n\n    return reach_towns\n\n\ndef plot_accessibility_map(\n    accessible_towns: set[str],\n    title: str,\n    filename: str = None,\n) -&gt; None:\n    _, ax = plt.subplots(figsize=(8, 8))\n\n    origin = GDF_BOUNDS[GDF_BOUNDS[\"town\"] == ORIGIN_TOWN]\n\n    mask = GDF_BOUNDS[\"town\"].isin(accessible_towns)\n    reachable = GDF_BOUNDS[mask]\n    unreachable = GDF_BOUNDS[~mask]\n\n    reachable.plot(\n        ax=ax,\n        color=\"seagreen\",\n        edgecolor=\"white\",\n        linewidth=0.5,\n        label=\"Accessible\",\n    )\n\n    origin.plot(\n        ax=ax,\n        color=\"peru\",\n        edgecolor=\"white\",\n        linewidth=0.5,\n        label=\"Origin\",\n    )\n\n    if not unreachable.empty:\n        unreachable.plot(\n            ax=ax,\n            color=\"firebrick\",\n            edgecolor=\"white\",\n            linewidth=0.5,\n            label=\"Inaccessible\",\n        )\n\n    plot_with_basemap(ax=ax, title=title, filename=filename)\n\n\naccessible_towns = get_accessible_towns(graph=graph_roads)\n\nplot_accessibility_map(\n    accessible_towns=accessible_towns,\n    title=f\"Accessible Towns from {ORIGIN_TOWN} via Road Network\",\n    filename=\"initial_accessibility_map.png\",\n)"
  },
  {
    "objectID": "02-transport-network.html#load-ferry-transport-network",
    "href": "02-transport-network.html#load-ferry-transport-network",
    "title": "Road and Ferry Transport Network of Bicol Region",
    "section": "4 Load ferry transport network",
    "text": "4 Load ferry transport network\n\ngraph_ferry = ox.graph_from_place(\n    \"Bicol Region\",\n    custom_filter='[\"route\"=\"ferry\"]',\n    retain_all=True,\n    simplify=False,\n)\n\ngraph_ferry = get_labeled_undirected_graph(graph_ferry, \"ferry\")\n\nlen(graph_ferry.nodes), len(graph_ferry.edges)\n\n(1087, 1060)\n\n\n\n_, ax = plt.subplots(figsize=(8, 8))\n\nox.plot_graph(\n    graph_ferry,\n    ax=ax,\n    node_size=0,\n    edge_color=\"royalblue\",\n    edge_linewidth=1.5,\n    show=False,\n    close=False,\n)\n\nplot_with_basemap(\n    ax,\n    title=\"Bicol Ferry Network\",\n    filename=\"ferry_network.png\",\n)\n\n\n\n\n\n\n\n\n\nfilepath = os.path.join(BASE_PATH, \"ferry_network.graphml\")\nox.save_graphml(graph_ferry, filepath=filepath)"
  },
  {
    "objectID": "02-transport-network.html#merge-road-and-ferry-networks",
    "href": "02-transport-network.html#merge-road-and-ferry-networks",
    "title": "Road and Ferry Transport Network of Bicol Region",
    "section": "5 Merge road and ferry networks",
    "text": "5 Merge road and ferry networks\n\ndef merge_networks(\n    graph_roads: nx.MultiDiGraph,\n    graph_ferry: nx.MultiDiGraph,\n    max_dist_m: int = 500,\n) -&gt; nx.MultiDiGraph:\n    graph_merged = nx.compose(graph_roads, graph_ferry)\n\n    nodes = ox.graph_to_gdfs(graph_merged, edges=False)[[\"x\", \"y\", \"mode\"]]\n    ferry_nodes = nodes[nodes[\"mode\"] == \"ferry\"]\n    road_nodes = nodes[nodes[\"mode\"] == \"road\"]\n    tree = cKDTree(road_nodes[[\"y\", \"x\"]].values)\n\n    for s_id, s_data in ferry_nodes.iterrows():\n        s_coord = (s_data[\"y\"], s_data[\"x\"])\n        _, idx = tree.query(s_coord, k=1)\n\n        l_id = road_nodes.index[idx]\n        l_coord = (road_nodes.iloc[idx][\"y\"], road_nodes.iloc[idx][\"x\"])\n        dist_m = geodesic(s_coord, l_coord).meters\n\n        if dist_m &lt;= max_dist_m:\n            for u, v in [(s_id, l_id), (l_id, s_id)]:\n                graph_merged.add_edge(u, v, length=dist_m, mode=\"road\")\n\n    return graph_merged\n\n\ndef prune_terminal_ferry_nodes(G: nx.MultiDiGraph) -&gt; nx.MultiDiGraph:\n    graph_pruned = G.copy()\n\n    while True:\n        terminal_nodes_to_remove = [\n            node\n            for node, degree in graph_pruned.degree()\n            if degree == 1 and graph_pruned.nodes[node].get(\"mode\") == \"ferry\"\n        ]\n        if not terminal_nodes_to_remove:\n            break\n        graph_pruned.remove_nodes_from(terminal_nodes_to_remove)\n\n    return graph_pruned\n\n\ngraph_merged = merge_networks(graph_roads, graph_ferry)\ngraph_merged = prune_terminal_ferry_nodes(graph_merged)\n\nfilepath = os.path.join(BASE_PATH, \"merged_network_full.graphml\")\nox.save_graphml(graph_merged, filepath)\n\ngraph_merged.number_of_nodes(), graph_merged.number_of_edges()\n\n(447510, 462305)\n\n\n\ngraph_merged = nx.MultiDiGraph(graph_merged)\ngraph_merged = ox.simplify_graph(graph_merged)\ngraph_merged = graph_merged.to_undirected()\n\nfilepath = os.path.join(BASE_PATH, \"merged_network_simplified.graphml\")\nox.save_graphml(graph_merged, filepath)\n\ngraph_merged.number_of_nodes(), graph_merged.number_of_edges()\n\n(56932, 71895)\n\n\n\nfig, ax = plt.subplots(figsize=(8, 8))\n\n_, edges = ox.graph_to_gdfs(graph_merged)\nedges = edges.reset_index()\n\nedges[edges[\"mode\"] == \"road\"].plot(\n    ax=ax,\n    color=\"seagreen\",\n    linewidth=0.8,\n    label=\"Road Network\",\n)\nedges[edges[\"mode\"] == \"ferry\"].plot(\n    ax=ax,\n    color=\"royalblue\",\n    linewidth=1.5,\n    label=\"Ferry Routes\",\n)\n\nplot_with_basemap(\n    ax=ax,\n    title=\"Bicol Road and Ferry Network\",\n    filename=\"merged_network.png\",\n)"
  },
  {
    "objectID": "02-transport-network.html#final-accessibility-analysis",
    "href": "02-transport-network.html#final-accessibility-analysis",
    "title": "Road and Ferry Transport Network of Bicol Region",
    "section": "6 Final accessibility analysis",
    "text": "6 Final accessibility analysis\n\naccessible_towns = get_accessible_towns(graph=graph_merged)\n\nplot_accessibility_map(\n    accessible_towns=accessible_towns,\n    title=f\"Accessible Towns from {ORIGIN_TOWN} via Road and Ferry Network\",\n    filename=\"final_accessibility_map.png\",\n)"
  },
  {
    "objectID": "tmp/results.html",
    "href": "tmp/results.html",
    "title": "Data Analysis Results",
    "section": "",
    "text": "Loads Philippine administrative boundaries and filters for the Bicol Region. Municipal names are standardized by removing suffixes and reformatting city designations.\nWhat is the specific source and administrative level of the geospatial data used to define the study area’s boundaries? &gt; The dataset for Philippine subnational administrative boundaries is sourced from the Humanitarian Data Exchange (HDX) platform. Geodatabase is selected from the available data formats. It uses EPSG:4326 as its Coordinate Reference System (CRS). The selected layer provided geometries of cities and municipalities. The geospatial coverage is limited to the Bicol Region. The dataset is last updated on November 9, 2023. No administrative boundary changes or new city and municipality creations are recorded in the region after this date.\nAfter filtering the dataset, which provinces comprise the Bicol Region, and what is the total number of municipalities and cities that form the basis of the analysis? &gt; The filtered dataset contains 6 provinces, 7 cities, and 107 municipalities. The figures are validated with the Philippine Standard Geographic Code (PSGC) database of Philippine Statistics Authority (PSA).\nWhat specific textual standardizations were applied to the town and city names, and why were these modifications necessary for ensuring data consistency in subsequent analyses? &gt; City names are standardized to use “City” suffix rather than “City of” prefix for consistency. Legacy names are removed, preserving only the current city and municipality names used by PSGC.\nWhat are the final data schema and file format of the prepared boundaries dataset, and how does this structure facilitate its integration with other network and storm data? &gt; The final dataset has 114 rows for each city/municipality and 3 columns for the city/municipality (string), province (string), and geometry (Shapely MultiPolygon).\n\n\n\nBuilds a transportation network by fetching road and ferry route data from OpenStreetMap. Merges the two networks into a single graph by connecting ferry terminals to the nearest road segments within a 500-meter radius.\nWhat specific OpenStreetMap (OSM) network types and tags were used to define the road and ferry systems, and what were the initial node and edge counts for each network prior to integration? &gt; OSMnx is used to build the transport network. Public and service roads (446869 nodes, 460990 edges) made up the land transport system. The “drive_service” road network type retrieves public drivable streets including service roads but excludes certain services such as parking or emergency access. The ferry routes (1087 nodes, 1060 edges) for sea transport system.\nWhat was the rationale for pruning terminal ferry nodes and subsequently simplifying the merged graph, and how did these post-processing steps quantitatively impact the final number of nodes and edges in the network? &gt; The original ferry transport network contains routes with endpoints outside the Bicol Region. Pruning is necessary to preserve local routes only. After pruning terminal ferry nodes, 332 ferry nodes and 308 ferry edges remain in the ferry transport network. Note that pruning is done after network simplification.\nWhat are the final node and edge counts of the resulting multi-modal transport network, and what distinct visual attributes represent the road and ferry components in the final map visualization? &gt; The integrated transport network contains 447510 nodes and 462305 edges. The simplified network contains 56932 nodes and 71895 edges. OSMnx’s edge simplification algorithm solves the curve digitization problem. It simplifies the graph’s topology by removing all nodes that are not “true” edge endpoints (i.e., intersections or dead-ends), then creating new (simplified) edges directly between those true endpoints and retaining the full geometries of the original edges as attributes on those new edges.\n\n\n\nAssesses town reachability from Legazpi City. Identifies nodes reachable from the origin’s nearest node and maps towns intersecting with corresponding road and ferry segments.\nWhen limited to the road network alone, which specific municipalities or provinces were identified as inaccessible from the origin point of Legazpi City? &gt; Initially, 81 cities and municipalities are accessible from Legazpi City via the road network. The entire provinces of Masbate and Catanduanes are inaccessible.\nHow did the integration of the ferry system quantitatively impact regional connectivity, and which specific towns became newly accessible as a direct result of this multi-modal approach? &gt; After merging ferry routes, 114 cities and municipalities are accessible from Legazpi City via the road and ferry network.\nAfter the inclusion of ferry routes, did any towns remain inaccessible from the origin, and what might this imply about the limitations of the transport data or the network itself? &gt; After merging ferry routes, all of the cities and municipalities are now accessible.\nWhat does the final accessibility map reveal about the overall pattern of regional connectivity from Legazpi City, especially concerning the transport links between mainland Bicol and its island provinces? &gt; The overall pattern is one where land-based transport ensures deep mainland connectivity, while sea-based transport provides the essential links for complete inter-province accessibility.\n\n\n\nAdds travel time weights to the network using speed limits for different road categories and ferry routes. Computes the fastest routes from a central relief hub to all town centers using Dijkstra’s algorithm.\nWhat specific speed limits were assigned to the different road classifications and ferry routes to enable travel time calculation, and what was the justification or source for these values? &gt; The road speed limits are taken from Republic Act No 4136 or the Land Transportation and Traffic Code which mandates the allowable speed limits on open country roads, city and municipal streets, and thoroughfares. Motor trucks and buses may travel up to 50 km/h on open country roads, 30 km/h on through streets or light-traffic city streets, and 20 km/h in crowded or hazardous areas. Meanwhile, the 17 km/h speed limit for ferry routes, sourced from Philippine Ship Spotters’ Society website, assumes older short-run vessels used on short routes between local interisland ferries.\nWhat is the overall distribution of the calculated travel times from the central relief hub to all municipalities, including the minimum, maximum, and average times required for delivery? &gt; The overall distribution of travel times from the central relief hub to all municipalities shows a minimum travel time of 0.11 hours, a maximum travel time of 6.91 hours, and an average travel time of 2.76 hours. The 25th percentile is 1.59 hours, the 50th percentile (median) is 2.48 hours, and the 75th percentile is 3.95 hours.\nWhich specific towns were identified as having the fastest and slowest travel times from the relief hub, and what geographic or network characteristics explain their logistical accessibility? &gt; The towns with the slowest travel times from the relief hub are all from Masbate province, namely, Esperanza, Pio V. Corpus, Placer, Cataingan, Cawayan, while the towns with the fastest travel times are all from Albay province, namely, Legazpi City, Daraga, Santo Domingo, Camalig, Malilipot.\nWhat spatial patterns do the visualized shortest path routes reveal, and how does the color gradient representing travel time illustrate the logistical challenges of reaching various parts of the Bicol Region? &gt; The spatial patterns reveal a hub-and-spoke network where travel routes radiate from a central relief center in Albay, with accessibility decreasing sharply towards the peripheries. The color gradient starkly visualizes logistical challenges, showing that travel times to island provinces (like Masbate and Catanduanes) and peninsular extremities are significantly longer due to geographic distance and reliance on slower sea transport.\n\n\n\nProcesses historical storm data from IBTrACS for tropical storms within the Philippine Area of Responsibility. Generates swaths—polygons representing storm impact areas—by buffering storm tracks based on recorded wind radii.\nWhat is the source of the historical storm data, and what specific criteria, such as storm type and geographic containment within the Philippine Area of Responsibility (PAR), were applied to filter the initial dataset? &gt; The historical storm data was sourced from the International Best Track Archive for Climate Stewardship (IBTrACS) and was filtered to include only events classified as tropical storms. The initial dataset was refined to retain only storms that had at least one recorded point within the Philippine Area of Responsibility (PAR).\nHow was the hazard footprint, or “swath,” for each storm defined, and what specific data attribute was used to determine the width of this impact area? &gt; The hazard footprint, or storm swath, was generated by creating a continuous buffered polygon along the recorded track of each storm. The width of this impact area was determined by the radius of 30-knot winds, a specific data attribute provided by the Tokyo Typhoon Center for each storm record.\nWhat was the final selection criterion for identifying storms that posed a direct threat to the Bicol Region, and what was the total number of unique storm events included in the final analysis? &gt; The final selection criterion was a direct spatial intersection, where only storms whose generated swaths physically overlapped with the Bicol transport network were included in the analysis. This process identified 671 unique storm events that were considered a direct threat and used for the subsequent damage simulation.\nWhat does the density heatmap of historical storm tracks indicate about the spatial distribution of typhoon risk, and which specific parts of the Bicol Region are most frequently exposed to these hazards? &gt; The density heatmap of storm tracks indicates that the highest risk is concentrated along the eastern seaboard, showing a frequent west-northwest path of storms coming from the Pacific Ocean. This spatial distribution reveals that the provinces of Catanduanes, Albay, and the Camarines provinces are the most frequently exposed to these storm hazards.\n\n\n\nCalculates degree, closeness, and betweenness centrality for nodes, as well as edge betweenness, to identify the most critical transport network components.\nHow are degree, betweenness, and closeness centrality defined in the context of this transport network, and what does a high value for each metric signify about a town’s role or position within the system? &gt; In this transport network, degree centrality measures a node’s direct connections, betweenness centrality measures its importance as a bridge on shortest paths, and closeness centrality measures its average travel time to all other nodes. A high degree value signifies a local hub like Naga City, high betweenness indicates a critical transit corridor like Pio Duran, and high closeness reveals a strategically accessible point like Garchitorena. These metrics define a town’s specific function within the regional transport system.\nWhat are the spatial patterns observed in the choropleth maps for each centrality measure, and which specific towns or provinces consistently emerge as having high degree, betweenness, and closeness? &gt; The spatial patterns show degree centrality is widely dispersed, betweenness is concentrated along the mainland’s central highway and key ports, and closeness is highest in coastal and island towns. Specific towns like Presentacion (degree), Pio Duran (betweenness), and Garchitorena (closeness) emerge as top performers in each category. Provinces like Camarines Sur and Albay are dominant in mainland-focused metrics, while Masbate leads in closeness due to its crucial sea connections.\nAre there notable differences in the geographic distribution of the three centrality measures, and if so, what do these divergences imply about the different functional roles of various towns (e.g., a local hub vs. a critical corridor)? &gt; Yes, the notable geographic differences reveal distinct functional roles for towns; high degree signifies a local hub, high betweenness a critical corridor, and high closeness a strategic access point. A town with many local roads may not be vital for long-distance travel, whereas a coastal town can be a more efficient distribution point than a mainland one. This divergence means disrupting a corridor town like Pio Duran severs regional transit, while disrupting a hub has more localized consequences.\nWhich specific road or ferry segments were identified as the most critical links based on edge betweenness centrality, and what does their geographic location suggest about potential network vulnerabilities and choke points? &gt; The most critical transport links are the main north-south highway segments in towns like Ligao City (Albay) and Libmanan (Camarines Sur), and the ferry routes connecting ports like Pio Duran to Masbate. Their locations reveal significant choke points, highlighting the network’s vulnerability due to its reliance on a single mainland highway and a few maritime gateways. Damage to these specific links would effectively isolate entire provinces and cut off island communities from the mainland.\n\n\n\nIdentifies densely connected clusters using the Louvain algorithm. Visualizes communities to reveal the transport network’s underlying structure.\nWhat specific algorithm was employed to detect communities within the transport network, and what was the total number of distinct communities identified by this method? &gt; The codebase employed the multilevel (Louvain) algorithm to detect communities within the transport network, which were then visualized on a map. The program was set up to count the number of distinct communities found by this method. The analysis revealed a structure of densely connected sub-regions within the broader transport system.\nTo what extent do the detected network communities correspond with established geographic or administrative boundaries, such as provinces or islands? &gt; The detected network communities correspond strongly with geographic and administrative boundaries, especially for the island provinces. For instance, the islands of Catanduanes and Masbate form distinct, self-contained communities that reflect their geographic separation. This correspondence is less exact on the central mainland, where the transport network is more integrated across provincial lines.\nWhat are the defining geographical characteristics of the most prominent communities, and do they represent distinct sub-regions like a ‘mainland’ cluster versus an ‘island province’ cluster? &gt; The most defining geographical characteristic is the clear division of communities into a “mainland” cluster versus several “island province” clusters. The mainland features a complex patchwork of interconnected communities, indicating high integration. In contrast, island provinces like Catanduanes and Masbate form their own cohesive and geographically isolated network communities.\nWhat does the identified community structure imply about the overall organization of the Bicol transport system, particularly regarding the integration or relative isolation of different parts of the region? &gt; The community structure implies that the Bicol transport system follows a “core-periphery” model of organization. The mainland peninsula acts as a highly integrated core with a dense and complex network. The island provinces function as relatively isolated peripheries with self-contained, less-developed networks that depend on limited links to the core.\n\n\n\nSimulates storm impacts by removing nodes within a typhoon’s swath. Measures network performance degradation using “relief delivery efficiency,” based on changes in travel times before and after damage.\nWhat specific metric was used to quantify “relief delivery efficiency,” and how is it mathematically derived from the travel times calculated before and after network damage? &gt; Relief delivery efficiency was quantified as the average of the logarithmic ratio between baseline and post-damage travel times for all delivery routes. The metric is mathematically derived using the formula \\(e = \\frac{1}{n} \\sum \\log_2(1 + T_{\\text{base}}/T_{\\text{new}})\\), where a higher value indicates better performance. This approach effectively translates changes in travel times into a single, normalized score representing overall network integrity.\nWhich node removal strategy—targeting betweenness, degree, closeness, or random nodes—consistently resulted in the most significant drop in delivery efficiency across the various damage levels? &gt; Targeting nodes by betweenness centrality consistently caused the most significant drop in efficiency. For instance, at just 2% node damage, this strategy reduced delivery efficiency to below 0.5, while all other strategies maintained efficiency above 0.7. This demonstrates that removing the network’s primary “bridge” nodes is far more disruptive than removing hubs or other centrally located points.\nIs there a critical damage threshold or “tipping point” evident in the results, where network efficiency begins to decline most sharply for the targeted removal strategies? &gt; A critical damage threshold is evident between 1% and 2% of node damage, where network efficiency declines most sharply. In this range, targeting high-betweenness nodes caused efficiency to plummet from approximately 0.8 down to 0.45. This “tipping point” signifies the rapid collapse of the network’s structure once a small core of its most critical nodes is compromised.\nWhat do the simulation results imply about the overall resilience of the Bicol transport network, and which specific type of structural vulnerability (e.g., reliance on critical corridors, major hubs, or general connectivity) poses the greatest risk to its operational integrity during a typhoon? &gt; The simulation results imply the Bicol transport network has a brittle resilience, as its integrity collapses after only 1-2% of key nodes fail. The greatest structural vulnerability is its heavy reliance on critical corridors and “choke point” nodes connecting different regions, as their removal had the most severe impact. Therefore, the loss of these high-betweenness bridges, rather than major hubs, poses the most significant risk to the network’s operational integrity during a typhoon.\n\n\n\nIdentifies critical transport nodes in the top 5% of betweenness centrality scores. Maps and aggregates these nodes by province and town to produce choropleth maps of their distribution.\nWhat specific metric and percentile threshold were used to define ‘critical infrastructure,’ and how many total nodes in the transport network met this criterion? &gt; Critical infrastructure was defined using betweenness centrality as the metric, with a threshold set at the 95th percentile to identify the top 5% of all nodes. A total of 2,847 nodes in the transport network met this criterion, corresponding to a betweenness centrality score of approximately 0.014295 or higher.\nWhat does the map of critical infrastructure reveal about the geographic distribution of these nodes, and are they clustered in specific areas or spread throughout the region? &gt; Critical nodes are highly clustered along major transport corridors. The most prominent cluster forms a central “spine” of nodes running the length of the Bicol Peninsula, while other clusters follow the main arterial and coastal roads on the island provinces of Masbate and Catanduanes. This distribution highlights the network’s dependency on a few key routes for regional connectivity.\nWhich specific provinces and municipalities contain the highest concentration of critical transport nodes, as indicated by the choropleth maps and summary tables? &gt; The provinces of Camarines Sur and Albay have the highest concentration of critical nodes, with 993 and 819 nodes, respectively. At the municipal level, Legazpi City, Masbate City, and Tabaco City contain the most critical infrastructure, with 120, 110, and 100 critical nodes each.\nWhat are the practical implications of these findings for disaster risk management and infrastructure investment, particularly regarding the prioritization of network hardening and resource allocation? &gt; Disaster management should shift from a general to a highly targeted strategy focused on a small number of critical components. This includes prioritizing infrastructure investment to strengthen the transport spine in Camarines Sur and Albay, creating redundancy around key choke points, strategically pre-positioning resources, and developing evidence-based contingency routes to bypass vulnerable links."
  },
  {
    "objectID": "tmp/results.html#geospatial-data-preparation",
    "href": "tmp/results.html#geospatial-data-preparation",
    "title": "Data Analysis Results",
    "section": "",
    "text": "Loads Philippine administrative boundaries and filters for the Bicol Region. Municipal names are standardized by removing suffixes and reformatting city designations.\nWhat is the specific source and administrative level of the geospatial data used to define the study area’s boundaries? &gt; The dataset for Philippine subnational administrative boundaries is sourced from the Humanitarian Data Exchange (HDX) platform. Geodatabase is selected from the available data formats. It uses EPSG:4326 as its Coordinate Reference System (CRS). The selected layer provided geometries of cities and municipalities. The geospatial coverage is limited to the Bicol Region. The dataset is last updated on November 9, 2023. No administrative boundary changes or new city and municipality creations are recorded in the region after this date.\nAfter filtering the dataset, which provinces comprise the Bicol Region, and what is the total number of municipalities and cities that form the basis of the analysis? &gt; The filtered dataset contains 6 provinces, 7 cities, and 107 municipalities. The figures are validated with the Philippine Standard Geographic Code (PSGC) database of Philippine Statistics Authority (PSA).\nWhat specific textual standardizations were applied to the town and city names, and why were these modifications necessary for ensuring data consistency in subsequent analyses? &gt; City names are standardized to use “City” suffix rather than “City of” prefix for consistency. Legacy names are removed, preserving only the current city and municipality names used by PSGC.\nWhat are the final data schema and file format of the prepared boundaries dataset, and how does this structure facilitate its integration with other network and storm data? &gt; The final dataset has 114 rows for each city/municipality and 3 columns for the city/municipality (string), province (string), and geometry (Shapely MultiPolygon)."
  },
  {
    "objectID": "tmp/results.html#multi-modal-transport-network-construction",
    "href": "tmp/results.html#multi-modal-transport-network-construction",
    "title": "Data Analysis Results",
    "section": "",
    "text": "Builds a transportation network by fetching road and ferry route data from OpenStreetMap. Merges the two networks into a single graph by connecting ferry terminals to the nearest road segments within a 500-meter radius.\nWhat specific OpenStreetMap (OSM) network types and tags were used to define the road and ferry systems, and what were the initial node and edge counts for each network prior to integration? &gt; OSMnx is used to build the transport network. Public and service roads (446869 nodes, 460990 edges) made up the land transport system. The “drive_service” road network type retrieves public drivable streets including service roads but excludes certain services such as parking or emergency access. The ferry routes (1087 nodes, 1060 edges) for sea transport system.\nWhat was the rationale for pruning terminal ferry nodes and subsequently simplifying the merged graph, and how did these post-processing steps quantitatively impact the final number of nodes and edges in the network? &gt; The original ferry transport network contains routes with endpoints outside the Bicol Region. Pruning is necessary to preserve local routes only. After pruning terminal ferry nodes, 332 ferry nodes and 308 ferry edges remain in the ferry transport network. Note that pruning is done after network simplification.\nWhat are the final node and edge counts of the resulting multi-modal transport network, and what distinct visual attributes represent the road and ferry components in the final map visualization? &gt; The integrated transport network contains 447510 nodes and 462305 edges. The simplified network contains 56932 nodes and 71895 edges. OSMnx’s edge simplification algorithm solves the curve digitization problem. It simplifies the graph’s topology by removing all nodes that are not “true” edge endpoints (i.e., intersections or dead-ends), then creating new (simplified) edges directly between those true endpoints and retaining the full geometries of the original edges as attributes on those new edges."
  },
  {
    "objectID": "tmp/results.html#network-accessibility-analysis",
    "href": "tmp/results.html#network-accessibility-analysis",
    "title": "Data Analysis Results",
    "section": "",
    "text": "Assesses town reachability from Legazpi City. Identifies nodes reachable from the origin’s nearest node and maps towns intersecting with corresponding road and ferry segments.\nWhen limited to the road network alone, which specific municipalities or provinces were identified as inaccessible from the origin point of Legazpi City? &gt; Initially, 81 cities and municipalities are accessible from Legazpi City via the road network. The entire provinces of Masbate and Catanduanes are inaccessible.\nHow did the integration of the ferry system quantitatively impact regional connectivity, and which specific towns became newly accessible as a direct result of this multi-modal approach? &gt; After merging ferry routes, 114 cities and municipalities are accessible from Legazpi City via the road and ferry network.\nAfter the inclusion of ferry routes, did any towns remain inaccessible from the origin, and what might this imply about the limitations of the transport data or the network itself? &gt; After merging ferry routes, all of the cities and municipalities are now accessible.\nWhat does the final accessibility map reveal about the overall pattern of regional connectivity from Legazpi City, especially concerning the transport links between mainland Bicol and its island provinces? &gt; The overall pattern is one where land-based transport ensures deep mainland connectivity, while sea-based transport provides the essential links for complete inter-province accessibility."
  },
  {
    "objectID": "tmp/results.html#travel-time-and-shortest-path-calculation",
    "href": "tmp/results.html#travel-time-and-shortest-path-calculation",
    "title": "Data Analysis Results",
    "section": "",
    "text": "Adds travel time weights to the network using speed limits for different road categories and ferry routes. Computes the fastest routes from a central relief hub to all town centers using Dijkstra’s algorithm.\nWhat specific speed limits were assigned to the different road classifications and ferry routes to enable travel time calculation, and what was the justification or source for these values? &gt; The road speed limits are taken from Republic Act No 4136 or the Land Transportation and Traffic Code which mandates the allowable speed limits on open country roads, city and municipal streets, and thoroughfares. Motor trucks and buses may travel up to 50 km/h on open country roads, 30 km/h on through streets or light-traffic city streets, and 20 km/h in crowded or hazardous areas. Meanwhile, the 17 km/h speed limit for ferry routes, sourced from Philippine Ship Spotters’ Society website, assumes older short-run vessels used on short routes between local interisland ferries.\nWhat is the overall distribution of the calculated travel times from the central relief hub to all municipalities, including the minimum, maximum, and average times required for delivery? &gt; The overall distribution of travel times from the central relief hub to all municipalities shows a minimum travel time of 0.11 hours, a maximum travel time of 6.91 hours, and an average travel time of 2.76 hours. The 25th percentile is 1.59 hours, the 50th percentile (median) is 2.48 hours, and the 75th percentile is 3.95 hours.\nWhich specific towns were identified as having the fastest and slowest travel times from the relief hub, and what geographic or network characteristics explain their logistical accessibility? &gt; The towns with the slowest travel times from the relief hub are all from Masbate province, namely, Esperanza, Pio V. Corpus, Placer, Cataingan, Cawayan, while the towns with the fastest travel times are all from Albay province, namely, Legazpi City, Daraga, Santo Domingo, Camalig, Malilipot.\nWhat spatial patterns do the visualized shortest path routes reveal, and how does the color gradient representing travel time illustrate the logistical challenges of reaching various parts of the Bicol Region? &gt; The spatial patterns reveal a hub-and-spoke network where travel routes radiate from a central relief center in Albay, with accessibility decreasing sharply towards the peripheries. The color gradient starkly visualizes logistical challenges, showing that travel times to island provinces (like Masbate and Catanduanes) and peninsular extremities are significantly longer due to geographic distance and reliance on slower sea transport."
  },
  {
    "objectID": "tmp/results.html#historical-storm-swath-generation",
    "href": "tmp/results.html#historical-storm-swath-generation",
    "title": "Data Analysis Results",
    "section": "",
    "text": "Processes historical storm data from IBTrACS for tropical storms within the Philippine Area of Responsibility. Generates swaths—polygons representing storm impact areas—by buffering storm tracks based on recorded wind radii.\nWhat is the source of the historical storm data, and what specific criteria, such as storm type and geographic containment within the Philippine Area of Responsibility (PAR), were applied to filter the initial dataset? &gt; The historical storm data was sourced from the International Best Track Archive for Climate Stewardship (IBTrACS) and was filtered to include only events classified as tropical storms. The initial dataset was refined to retain only storms that had at least one recorded point within the Philippine Area of Responsibility (PAR).\nHow was the hazard footprint, or “swath,” for each storm defined, and what specific data attribute was used to determine the width of this impact area? &gt; The hazard footprint, or storm swath, was generated by creating a continuous buffered polygon along the recorded track of each storm. The width of this impact area was determined by the radius of 30-knot winds, a specific data attribute provided by the Tokyo Typhoon Center for each storm record.\nWhat was the final selection criterion for identifying storms that posed a direct threat to the Bicol Region, and what was the total number of unique storm events included in the final analysis? &gt; The final selection criterion was a direct spatial intersection, where only storms whose generated swaths physically overlapped with the Bicol transport network were included in the analysis. This process identified 671 unique storm events that were considered a direct threat and used for the subsequent damage simulation.\nWhat does the density heatmap of historical storm tracks indicate about the spatial distribution of typhoon risk, and which specific parts of the Bicol Region are most frequently exposed to these hazards? &gt; The density heatmap of storm tracks indicates that the highest risk is concentrated along the eastern seaboard, showing a frequent west-northwest path of storms coming from the Pacific Ocean. This spatial distribution reveals that the provinces of Catanduanes, Albay, and the Camarines provinces are the most frequently exposed to these storm hazards."
  },
  {
    "objectID": "tmp/results.html#centrality-metrics-computation",
    "href": "tmp/results.html#centrality-metrics-computation",
    "title": "Data Analysis Results",
    "section": "",
    "text": "Calculates degree, closeness, and betweenness centrality for nodes, as well as edge betweenness, to identify the most critical transport network components.\nHow are degree, betweenness, and closeness centrality defined in the context of this transport network, and what does a high value for each metric signify about a town’s role or position within the system? &gt; In this transport network, degree centrality measures a node’s direct connections, betweenness centrality measures its importance as a bridge on shortest paths, and closeness centrality measures its average travel time to all other nodes. A high degree value signifies a local hub like Naga City, high betweenness indicates a critical transit corridor like Pio Duran, and high closeness reveals a strategically accessible point like Garchitorena. These metrics define a town’s specific function within the regional transport system.\nWhat are the spatial patterns observed in the choropleth maps for each centrality measure, and which specific towns or provinces consistently emerge as having high degree, betweenness, and closeness? &gt; The spatial patterns show degree centrality is widely dispersed, betweenness is concentrated along the mainland’s central highway and key ports, and closeness is highest in coastal and island towns. Specific towns like Presentacion (degree), Pio Duran (betweenness), and Garchitorena (closeness) emerge as top performers in each category. Provinces like Camarines Sur and Albay are dominant in mainland-focused metrics, while Masbate leads in closeness due to its crucial sea connections.\nAre there notable differences in the geographic distribution of the three centrality measures, and if so, what do these divergences imply about the different functional roles of various towns (e.g., a local hub vs. a critical corridor)? &gt; Yes, the notable geographic differences reveal distinct functional roles for towns; high degree signifies a local hub, high betweenness a critical corridor, and high closeness a strategic access point. A town with many local roads may not be vital for long-distance travel, whereas a coastal town can be a more efficient distribution point than a mainland one. This divergence means disrupting a corridor town like Pio Duran severs regional transit, while disrupting a hub has more localized consequences.\nWhich specific road or ferry segments were identified as the most critical links based on edge betweenness centrality, and what does their geographic location suggest about potential network vulnerabilities and choke points? &gt; The most critical transport links are the main north-south highway segments in towns like Ligao City (Albay) and Libmanan (Camarines Sur), and the ferry routes connecting ports like Pio Duran to Masbate. Their locations reveal significant choke points, highlighting the network’s vulnerability due to its reliance on a single mainland highway and a few maritime gateways. Damage to these specific links would effectively isolate entire provinces and cut off island communities from the mainland."
  },
  {
    "objectID": "tmp/results.html#network-community-detection",
    "href": "tmp/results.html#network-community-detection",
    "title": "Data Analysis Results",
    "section": "",
    "text": "Identifies densely connected clusters using the Louvain algorithm. Visualizes communities to reveal the transport network’s underlying structure.\nWhat specific algorithm was employed to detect communities within the transport network, and what was the total number of distinct communities identified by this method? &gt; The codebase employed the multilevel (Louvain) algorithm to detect communities within the transport network, which were then visualized on a map. The program was set up to count the number of distinct communities found by this method. The analysis revealed a structure of densely connected sub-regions within the broader transport system.\nTo what extent do the detected network communities correspond with established geographic or administrative boundaries, such as provinces or islands? &gt; The detected network communities correspond strongly with geographic and administrative boundaries, especially for the island provinces. For instance, the islands of Catanduanes and Masbate form distinct, self-contained communities that reflect their geographic separation. This correspondence is less exact on the central mainland, where the transport network is more integrated across provincial lines.\nWhat are the defining geographical characteristics of the most prominent communities, and do they represent distinct sub-regions like a ‘mainland’ cluster versus an ‘island province’ cluster? &gt; The most defining geographical characteristic is the clear division of communities into a “mainland” cluster versus several “island province” clusters. The mainland features a complex patchwork of interconnected communities, indicating high integration. In contrast, island provinces like Catanduanes and Masbate form their own cohesive and geographically isolated network communities.\nWhat does the identified community structure imply about the overall organization of the Bicol transport system, particularly regarding the integration or relative isolation of different parts of the region? &gt; The community structure implies that the Bicol transport system follows a “core-periphery” model of organization. The mainland peninsula acts as a highly integrated core with a dense and complex network. The island provinces function as relatively isolated peripheries with self-contained, less-developed networks that depend on limited links to the core."
  },
  {
    "objectID": "tmp/results.html#damage-simulation-and-efficiency-analysis",
    "href": "tmp/results.html#damage-simulation-and-efficiency-analysis",
    "title": "Data Analysis Results",
    "section": "",
    "text": "Simulates storm impacts by removing nodes within a typhoon’s swath. Measures network performance degradation using “relief delivery efficiency,” based on changes in travel times before and after damage.\nWhat specific metric was used to quantify “relief delivery efficiency,” and how is it mathematically derived from the travel times calculated before and after network damage? &gt; Relief delivery efficiency was quantified as the average of the logarithmic ratio between baseline and post-damage travel times for all delivery routes. The metric is mathematically derived using the formula \\(e = \\frac{1}{n} \\sum \\log_2(1 + T_{\\text{base}}/T_{\\text{new}})\\), where a higher value indicates better performance. This approach effectively translates changes in travel times into a single, normalized score representing overall network integrity.\nWhich node removal strategy—targeting betweenness, degree, closeness, or random nodes—consistently resulted in the most significant drop in delivery efficiency across the various damage levels? &gt; Targeting nodes by betweenness centrality consistently caused the most significant drop in efficiency. For instance, at just 2% node damage, this strategy reduced delivery efficiency to below 0.5, while all other strategies maintained efficiency above 0.7. This demonstrates that removing the network’s primary “bridge” nodes is far more disruptive than removing hubs or other centrally located points.\nIs there a critical damage threshold or “tipping point” evident in the results, where network efficiency begins to decline most sharply for the targeted removal strategies? &gt; A critical damage threshold is evident between 1% and 2% of node damage, where network efficiency declines most sharply. In this range, targeting high-betweenness nodes caused efficiency to plummet from approximately 0.8 down to 0.45. This “tipping point” signifies the rapid collapse of the network’s structure once a small core of its most critical nodes is compromised.\nWhat do the simulation results imply about the overall resilience of the Bicol transport network, and which specific type of structural vulnerability (e.g., reliance on critical corridors, major hubs, or general connectivity) poses the greatest risk to its operational integrity during a typhoon? &gt; The simulation results imply the Bicol transport network has a brittle resilience, as its integrity collapses after only 1-2% of key nodes fail. The greatest structural vulnerability is its heavy reliance on critical corridors and “choke point” nodes connecting different regions, as their removal had the most severe impact. Therefore, the loss of these high-betweenness bridges, rather than major hubs, poses the most significant risk to the network’s operational integrity during a typhoon."
  },
  {
    "objectID": "tmp/results.html#critical-infrastructure-identification-and-mapping",
    "href": "tmp/results.html#critical-infrastructure-identification-and-mapping",
    "title": "Data Analysis Results",
    "section": "",
    "text": "Identifies critical transport nodes in the top 5% of betweenness centrality scores. Maps and aggregates these nodes by province and town to produce choropleth maps of their distribution.\nWhat specific metric and percentile threshold were used to define ‘critical infrastructure,’ and how many total nodes in the transport network met this criterion? &gt; Critical infrastructure was defined using betweenness centrality as the metric, with a threshold set at the 95th percentile to identify the top 5% of all nodes. A total of 2,847 nodes in the transport network met this criterion, corresponding to a betweenness centrality score of approximately 0.014295 or higher.\nWhat does the map of critical infrastructure reveal about the geographic distribution of these nodes, and are they clustered in specific areas or spread throughout the region? &gt; Critical nodes are highly clustered along major transport corridors. The most prominent cluster forms a central “spine” of nodes running the length of the Bicol Peninsula, while other clusters follow the main arterial and coastal roads on the island provinces of Masbate and Catanduanes. This distribution highlights the network’s dependency on a few key routes for regional connectivity.\nWhich specific provinces and municipalities contain the highest concentration of critical transport nodes, as indicated by the choropleth maps and summary tables? &gt; The provinces of Camarines Sur and Albay have the highest concentration of critical nodes, with 993 and 819 nodes, respectively. At the municipal level, Legazpi City, Masbate City, and Tabaco City contain the most critical infrastructure, with 120, 110, and 100 critical nodes each.\nWhat are the practical implications of these findings for disaster risk management and infrastructure investment, particularly regarding the prioritization of network hardening and resource allocation? &gt; Disaster management should shift from a general to a highly targeted strategy focused on a small number of critical components. This includes prioritizing infrastructure investment to strengthen the transport spine in Camarines Sur and Albay, creating redundancy around key choke points, strategically pre-positioning resources, and developing evidence-based contingency routes to bypass vulnerable links."
  },
  {
    "objectID": "tmp/code/02-transport-network.html",
    "href": "tmp/code/02-transport-network.html",
    "title": "Road and Ferry Transport Network of Bicol Region",
    "section": "",
    "text": "import os\nimport warnings\n\nimport contextily as cx\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nimport networkx as nx\nimport osmnx as ox\nimport pandas as pd\nfrom geopy.distance import geodesic\nfrom matplotlib.axes import Axes\nfrom scipy.spatial import cKDTree\n\nwarnings.filterwarnings(\"ignore\")\n\n\nBASE_PATH = \"./data\"\nBOUNDARIES_FILE = os.path.join(BASE_PATH, \"boundaries.gpkg\")\n\n\ndef plot_network_map(\n    ax: Axes,\n    gdf: gpd.GeoDataFrame,\n    title: str,\n    filename: str = None,\n    padding: float = 0.1,\n) -&gt; None:\n    x_min, y_min, x_max, y_max = gdf.total_bounds\n    ax.set_xlim(x_min - padding, x_max + padding)\n    ax.set_ylim(y_min - padding, y_max + padding)\n\n    cx.add_basemap(\n        ax,\n        crs=gdf.crs,\n        source=cx.providers.CartoDB.Positron,\n        attribution=\"\",\n    )\n\n    ax.set_title(title)\n    ax.set_axis_off()\n    plt.tight_layout()\n\n    if filename:\n        filepath = os.path.join(BASE_PATH, filename)\n        plt.savefig(filepath, dpi=300, bbox_inches=\"tight\")\n\n    plt.show()\n\n\ndef get_labeled_undirected_graph(\n    G: nx.MultiDiGraph,\n    mode: str,\n) -&gt; nx.MultiGraph:\n    G = G.to_undirected()\n\n    for _, data in G.nodes(data=True):\n        data[\"mode\"] = mode\n    for _, _, data in G.edges(data=True):\n        data[\"mode\"] = mode\n\n    return G"
  },
  {
    "objectID": "tmp/code/02-transport-network.html#setup-environment",
    "href": "tmp/code/02-transport-network.html#setup-environment",
    "title": "Road and Ferry Transport Network of Bicol Region",
    "section": "",
    "text": "import os\nimport warnings\n\nimport contextily as cx\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nimport networkx as nx\nimport osmnx as ox\nimport pandas as pd\nfrom geopy.distance import geodesic\nfrom matplotlib.axes import Axes\nfrom scipy.spatial import cKDTree\n\nwarnings.filterwarnings(\"ignore\")\n\n\nBASE_PATH = \"./data\"\nBOUNDARIES_FILE = os.path.join(BASE_PATH, \"boundaries.gpkg\")\n\n\ndef plot_network_map(\n    ax: Axes,\n    gdf: gpd.GeoDataFrame,\n    title: str,\n    filename: str = None,\n    padding: float = 0.1,\n) -&gt; None:\n    x_min, y_min, x_max, y_max = gdf.total_bounds\n    ax.set_xlim(x_min - padding, x_max + padding)\n    ax.set_ylim(y_min - padding, y_max + padding)\n\n    cx.add_basemap(\n        ax,\n        crs=gdf.crs,\n        source=cx.providers.CartoDB.Positron,\n        attribution=\"\",\n    )\n\n    ax.set_title(title)\n    ax.set_axis_off()\n    plt.tight_layout()\n\n    if filename:\n        filepath = os.path.join(BASE_PATH, filename)\n        plt.savefig(filepath, dpi=300, bbox_inches=\"tight\")\n\n    plt.show()\n\n\ndef get_labeled_undirected_graph(\n    G: nx.MultiDiGraph,\n    mode: str,\n) -&gt; nx.MultiGraph:\n    G = G.to_undirected()\n\n    for _, data in G.nodes(data=True):\n        data[\"mode\"] = mode\n    for _, _, data in G.edges(data=True):\n        data[\"mode\"] = mode\n\n    return G"
  },
  {
    "objectID": "tmp/code/02-transport-network.html#load-town-boundaries",
    "href": "tmp/code/02-transport-network.html#load-town-boundaries",
    "title": "Road and Ferry Transport Network of Bicol Region",
    "section": "1 Load town boundaries",
    "text": "1 Load town boundaries\n\ngdf_boundaries = gpd.read_file(BOUNDARIES_FILE)\ngdf_boundaries.head()\n\n\n\n\n\n\n\n\ntown\nprovince\ngeometry\n\n\n\n\n0\nBacacay\nAlbay\nMULTIPOLYGON (((123.84193 13.3341, 123.84204 1...\n\n\n1\nCamalig\nAlbay\nMULTIPOLYGON (((123.6559 13.06131, 123.65536 1...\n\n\n2\nDaraga\nAlbay\nMULTIPOLYGON (((123.71487 13.03995, 123.71474 ...\n\n\n3\nGuinobatan\nAlbay\nMULTIPOLYGON (((123.68355 13.25321, 123.67729 ...\n\n\n4\nJovellar\nAlbay\nMULTIPOLYGON (((123.6559 13.06131, 123.65568 1..."
  },
  {
    "objectID": "tmp/code/02-transport-network.html#generate-road-transport-network",
    "href": "tmp/code/02-transport-network.html#generate-road-transport-network",
    "title": "Road and Ferry Transport Network of Bicol Region",
    "section": "2 Generate road transport network",
    "text": "2 Generate road transport network\n\ngraph_roads = ox.graph_from_place(\n    \"Bicol Region\",\n    network_type=\"drive_service\",\n    simplify=False,\n    retain_all=True,\n)\n\ngraph_roads = get_labeled_undirected_graph(graph_roads, \"road\")\n\nlen(graph_roads.nodes), len(graph_roads.edges)\n\n(446869, 460990)\n\n\n\n_, ax = plt.subplots(figsize=(8, 8))\n\nox.plot_graph(\n    graph_roads,\n    ax=ax,\n    node_size=0,\n    edge_color=\"seagreen\",\n    edge_linewidth=0.5,\n    show=False,\n    close=False,\n)\n\nplot_network_map(\n    ax=ax,\n    gdf=gdf_boundaries,\n    title=\"Bicol Road Network\",\n    filename=\"road_network.png\",\n)\n\n\n\n\n\n\n\n\n\nfilepath = os.path.join(BASE_PATH, \"road_network.graphml\")\nox.save_graphml(graph_roads, filepath=filepath)"
  },
  {
    "objectID": "tmp/code/02-transport-network.html#initial-road-only-accessibility-analysis",
    "href": "tmp/code/02-transport-network.html#initial-road-only-accessibility-analysis",
    "title": "Road and Ferry Transport Network of Bicol Region",
    "section": "3 Initial road-only accessibility analysis",
    "text": "3 Initial road-only accessibility analysis\n\ndef get_accessible_towns(\n    G: nx.Graph,\n    gdf: gpd.GeoDataFrame,\n    origin_town: str,\n) -&gt; pd.Series:\n    origin_point = gdf[gdf[\"town\"] == origin_town].union_all().centroid\n    origin_node = ox.nearest_nodes(G, origin_point.x, origin_point.y)\n\n    reachable_nodes = {origin_node} | nx.descendants(G, origin_node)\n    reachable_subgraph = G.subgraph(reachable_nodes)\n    gdf_reachable_edges = ox.graph_to_gdfs(\n        reachable_subgraph,\n        nodes=False,\n        edges=True,\n    )\n\n    if gdf_reachable_edges.empty:\n        reachable_towns = set()\n    else:\n        gdf_reachable_towns = gpd.sjoin(\n            gdf,\n            gdf_reachable_edges,\n            how=\"inner\",\n            predicate=\"intersects\",\n        )\n        reachable_towns = set(gdf_reachable_towns[\"town\"].unique())\n\n    return gdf[\"town\"].isin(reachable_towns)\n\n\ndef plot_accessibility_map(\n    gdf: gpd.GeoDataFrame,\n    column: str,\n    origin_town: str,\n    title: str,\n    filename: str = None,\n) -&gt; None:\n    _, ax = plt.subplots(figsize=(8, 8))\n\n    origin = gdf[gdf[\"town\"] == origin_town]\n    accessible = gdf[gdf[column]]\n    inaccessible = gdf[~gdf[column]]\n\n    accessible.plot(\n        ax=ax,\n        color=\"seagreen\",\n        edgecolor=\"white\",\n        linewidth=0.5,\n        label=\"Accessible\",\n    )\n\n    origin.plot(\n        ax=ax,\n        color=\"peru\",\n        edgecolor=\"white\",\n        linewidth=0.5,\n        label=\"Origin\",\n    )\n\n    if not inaccessible.empty:\n        inaccessible.plot(\n            ax=ax,\n            color=\"firebrick\",\n            edgecolor=\"white\",\n            linewidth=0.5,\n            label=\"Inaccessible\",\n        )\n\n    plot_network_map(ax=ax, gdf=gdf, title=title, filename=filename)\n\n\norigin_town = \"Legazpi City\"\ncolumn = \"initial_access\"\n\ngdf_boundaries[column] = get_accessible_towns(\n    G=graph_roads,\n    gdf=gdf_boundaries.copy(),\n    origin_town=origin_town,\n)\n\nplot_accessibility_map(\n    gdf=gdf_boundaries,\n    column=column,\n    origin_town=origin_town,\n    title=f\"Town Accessibility from {origin_town} via Road Network\",\n    filename=\"initial_accessibility_map.png\",\n)\n\n\n\n\n\n\n\n\ntown\nprovince\ngeometry\ninitial_access\n\n\n\n\n0\nBacacay\nAlbay\nMULTIPOLYGON (((123.84193 13.3341, 123.84204 1...\nTrue\n\n\n1\nCamalig\nAlbay\nMULTIPOLYGON (((123.6559 13.06131, 123.65536 1...\nTrue\n\n\n2\nDaraga\nAlbay\nMULTIPOLYGON (((123.71487 13.03995, 123.71474 ...\nTrue\n\n\n3\nGuinobatan\nAlbay\nMULTIPOLYGON (((123.68355 13.25321, 123.67729 ...\nTrue\n\n\n4\nJovellar\nAlbay\nMULTIPOLYGON (((123.6559 13.06131, 123.65568 1...\nTrue"
  },
  {
    "objectID": "tmp/code/02-transport-network.html#load-ferry-transport-network",
    "href": "tmp/code/02-transport-network.html#load-ferry-transport-network",
    "title": "Road and Ferry Transport Network of Bicol Region",
    "section": "4 Load ferry transport network",
    "text": "4 Load ferry transport network\n\ngraph_ferry = ox.graph_from_place(\n    \"Bicol Region\",\n    custom_filter='[\"route\"=\"ferry\"]',\n    retain_all=True,\n    simplify=False,\n)\ngraph_ferry = get_labeled_undirected_graph(graph_ferry, \"ferry\")\n\nlen(graph_ferry.nodes), len(graph_ferry.edges)\n\n(1087, 1060)\n\n\n\n_, ax = plt.subplots(figsize=(8, 8))\n\nox.plot_graph(\n    graph_ferry,\n    ax=ax,\n    node_size=0,\n    edge_color=\"royalblue\",\n    edge_linewidth=1.5,\n    show=False,\n    close=False,\n)\n\nplot_network_map(\n    ax=ax,\n    gdf=gdf_boundaries,\n    title=\"Bicol Ferry Network\",\n    filename=\"ferry_network.png\",\n)\n\n\n\n\n\n\n\n\n\nfilepath = os.path.join(BASE_PATH, \"ferry_network.graphml\")\nox.save_graphml(graph_ferry, filepath=filepath)"
  },
  {
    "objectID": "tmp/code/02-transport-network.html#merge-road-and-ferry-networks",
    "href": "tmp/code/02-transport-network.html#merge-road-and-ferry-networks",
    "title": "Road and Ferry Transport Network of Bicol Region",
    "section": "5 Merge road and ferry networks",
    "text": "5 Merge road and ferry networks\n\ndef merge_networks(\n    graph_roads: nx.MultiDiGraph,\n    graph_ferry: nx.MultiDiGraph,\n    max_dist_m: int = 500,\n) -&gt; nx.MultiDiGraph:\n    graph_merged = nx.compose(graph_roads, graph_ferry)\n\n    nodes = ox.graph_to_gdfs(graph_merged, edges=False)[[\"x\", \"y\", \"mode\"]]\n    ferry_nodes = nodes[nodes[\"mode\"] == \"ferry\"]\n    road_nodes = nodes[nodes[\"mode\"] == \"road\"]\n    tree = cKDTree(road_nodes[[\"y\", \"x\"]].values)\n\n    for s_id, s_data in ferry_nodes.iterrows():\n        s_coord = (s_data[\"y\"], s_data[\"x\"])\n        _, idx = tree.query(s_coord, k=1)\n\n        l_id = road_nodes.index[idx]\n        l_coord = (road_nodes.iloc[idx][\"y\"], road_nodes.iloc[idx][\"x\"])\n        dist_m = geodesic(s_coord, l_coord).meters\n\n        if dist_m &lt;= max_dist_m:\n            for u, v in [(s_id, l_id), (l_id, s_id)]:\n                graph_merged.add_edge(u, v, length=dist_m, mode=\"road\")\n\n    return graph_merged\n\n\ndef prune_terminal_ferry_nodes(G: nx.MultiDiGraph) -&gt; nx.MultiDiGraph:\n    graph_pruned = G.copy()\n\n    while True:\n        terminal_nodes_to_remove = [\n            node\n            for node, degree in graph_pruned.degree()\n            if degree == 1 and graph_pruned.nodes[node].get(\"mode\") == \"ferry\"\n        ]\n        if not terminal_nodes_to_remove:\n            break\n        graph_pruned.remove_nodes_from(terminal_nodes_to_remove)\n\n    return graph_pruned\n\n\ngraph_merged = merge_networks(graph_roads, graph_ferry)\ngraph_merged = prune_terminal_ferry_nodes(graph_merged)\n\nfilename = os.path.join(BASE_PATH, \"merged_network_full.graphml\")\nox.save_graphml(graph_merged, filename)\n\ngraph_merged.number_of_nodes(), graph_merged.number_of_edges()\n\n(447510, 462305)\n\n\n\ngraph_merged = nx.MultiDiGraph(graph_merged)\ngraph_merged = ox.simplify_graph(graph_merged)\ngraph_merged = graph_merged.to_undirected()\n\nfilename = os.path.join(BASE_PATH, \"merged_network_simplified.graphml\")\nox.save_graphml(graph_merged, filename)\n\ngraph_merged.number_of_nodes(), graph_merged.number_of_edges()\n\n(56932, 71895)\n\n\n\nfig, ax = plt.subplots(figsize=(8, 8))\n\n_, edges = ox.graph_to_gdfs(graph_merged)\nedges = edges.reset_index()\n\nedges[edges[\"mode\"] == \"road\"].plot(\n    ax=ax,\n    color=\"seagreen\",\n    linewidth=0.8,\n    label=\"Road Network\",\n)\nedges[edges[\"mode\"] == \"ferry\"].plot(\n    ax=ax,\n    color=\"royalblue\",\n    linewidth=1.5,\n    label=\"Ferry Routes\",\n)\n\nplot_network_map(\n    ax=ax,\n    gdf=gdf_boundaries,\n    title=\"Bicol Road and Ferry Network\",\n    filename=\"merged_network.png\",\n)"
  },
  {
    "objectID": "tmp/code/02-transport-network.html#final-accessibility-analysis",
    "href": "tmp/code/02-transport-network.html#final-accessibility-analysis",
    "title": "Road and Ferry Transport Network of Bicol Region",
    "section": "6 Final accessibility analysis",
    "text": "6 Final accessibility analysis\n\ncolumn = \"final_access\"\n\ngdf_boundaries[column] = get_accessible_towns(\n    G=graph_merged,\n    gdf=gdf_boundaries.copy(),\n    origin_town=origin_town,\n)\n\nplot_accessibility_map(\n    gdf=gdf_boundaries,\n    column=column,\n    origin_town=origin_town,\n    title=f\"Town Accessibility from {origin_town} via Road and Ferry Network\",\n    filename=\"final_accessibility_map.png\",\n)\n\n\n\n\n\n\n\n\n\nfilepath = os.path.join(BASE_PATH, \"boundaries_with_accessibility.gpkg\")\ngdf_boundaries.to_file(filepath, driver=\"GPKG\")"
  },
  {
    "objectID": "tmp/code/01-boundaries.html",
    "href": "tmp/code/01-boundaries.html",
    "title": "Town-Level Administrative Boundaries of Bicol Region",
    "section": "",
    "text": "import os\n\nimport contextily as cx\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\n\n\nOUTPUT_DIR = \"./data\"\n\nif not os.path.exists(OUTPUT_DIR):\n    os.makedirs(OUTPUT_DIR)"
  },
  {
    "objectID": "tmp/code/01-boundaries.html#setup-environment",
    "href": "tmp/code/01-boundaries.html#setup-environment",
    "title": "Town-Level Administrative Boundaries of Bicol Region",
    "section": "",
    "text": "import os\n\nimport contextily as cx\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\n\n\nOUTPUT_DIR = \"./data\"\n\nif not os.path.exists(OUTPUT_DIR):\n    os.makedirs(OUTPUT_DIR)"
  },
  {
    "objectID": "tmp/code/01-boundaries.html#load-data-from-from-web",
    "href": "tmp/code/01-boundaries.html#load-data-from-from-web",
    "title": "Town-Level Administrative Boundaries of Bicol Region",
    "section": "1 Load data from from web",
    "text": "1 Load data from from web\nThe dataset is available on Humanitarian Data Exchange (HDX).\n\npath = \"https://data.humdata.org/dataset/caf116df-f984-4deb-85ca-41b349d3f313/resource/314cbaea-c7a0-4ce9-a4ea-e5af2a788ac1/download/phl_adm_psa_namria_20231106_gdb.gdb.zip\"\nlayer = \"phl_admbnda_adm3_psa_namria_20231106\"\n\ngdf_boundaries = gpd.read_file(path, layer=layer)\ngdf_boundaries.head()\n\n/home/ainz/Code/transport-network-analysis/.venv/lib64/python3.13/site-packages/pyogrio/raw.py:198: RuntimeWarning: organizePolygons() received a polygon with more than 100 parts.  The processing may be really slow.  You can skip the processing by setting METHOD=SKIP.\n  return ogr_read(\n\n\n\n\n\n\n\n\n\nADM3_EN\nADM3_PCODE\nADM2_EN\nADM2_PCODE\nADM1_EN\nADM1_PCODE\nADM0_EN\nADM0_PCODE\ndate\nvalidOn\nvalidTo\nADM3_REF\nADM3ALT1EN\nShape_Length\nShape_Area\nAREA_SQKM\ngeometry\n\n\n\n\n0\nAdams\nPH0102801\nIlocos Norte\nPH01028\nRegion I (Ilocos Region)\nPH01\nPhilippines (the)\nPH\n2022-11-09 00:00:00+00:00\n2023-11-06 00:00:00+00:00\nNaT\nNone\nNone\n0.423604\n0.009506\n111.143026\nMULTIPOLYGON (((120.96915 18.51012, 120.95867 ...\n\n\n1\nBacarra\nPH0102802\nIlocos Norte\nPH01028\nRegion I (Ilocos Region)\nPH01\nPhilippines (the)\nPH\n2022-11-09 00:00:00+00:00\n2023-11-06 00:00:00+00:00\nNaT\nNone\nNone\n0.309136\n0.004725\n55.303195\nMULTIPOLYGON (((120.66821 18.28705, 120.66441 ...\n\n\n2\nBadoc\nPH0102803\nIlocos Norte\nPH01028\nRegion I (Ilocos Region)\nPH01\nPhilippines (the)\nPH\n2022-11-09 00:00:00+00:00\n2023-11-06 00:00:00+00:00\nNaT\nNone\nNone\n0.599295\n0.006880\n80.683970\nMULTIPOLYGON (((120.47814 17.97717, 120.47816 ...\n\n\n3\nBangui\nPH0102804\nIlocos Norte\nPH01028\nRegion I (Ilocos Region)\nPH01\nPhilippines (the)\nPH\n2022-11-09 00:00:00+00:00\n2023-11-06 00:00:00+00:00\nNaT\nNone\nNone\n0.483066\n0.009843\n115.059041\nMULTIPOLYGON (((120.81318 18.53457, 120.81358 ...\n\n\n4\nCity of Batac\nPH0102805\nIlocos Norte\nPH01028\nRegion I (Ilocos Region)\nPH01\nPhilippines (the)\nPH\n2022-11-09 00:00:00+00:00\n2023-11-06 00:00:00+00:00\nNaT\nNone\nNone\n0.613500\n0.013493\n158.123132\nMULTIPOLYGON (((120.61242 18.10947, 120.612 18..."
  },
  {
    "objectID": "tmp/code/01-boundaries.html#limit-coverage-to-bicol-region",
    "href": "tmp/code/01-boundaries.html#limit-coverage-to-bicol-region",
    "title": "Town-Level Administrative Boundaries of Bicol Region",
    "section": "2 Limit coverage to Bicol Region",
    "text": "2 Limit coverage to Bicol Region\n\ngdf_boundaries = gdf_boundaries[gdf_boundaries[\"ADM1_EN\"].str.contains(\"Bicol\")]\ngdf_boundaries = gdf_boundaries.reset_index(drop=True)\n\n\n_, ax = plt.subplots(1, 1, figsize=(8, 8))\n\ngdf_boundaries.plot(ax=ax, edgecolor=\"white\", linewidth=0.5, facecolor=\"seagreen\")\n\nx_min, y_min, x_max, y_max = gdf_boundaries.total_bounds\npadding = 0.1\nax.set_xlim(x_min - padding, x_max + padding)\nax.set_ylim(y_min - padding, y_max + padding)\n\ncx.add_basemap(ax, crs=gdf_boundaries.crs, source=cx.providers.CartoDB.Positron, attribution=\"\")\n\nplt.title(\"Town-Level Administrative Boundaries of Bicol Region\")\nplt.tight_layout()\nplt.axis(\"off\")\n\nfilepath = os.path.join(OUTPUT_DIR, \"boundaries.png\")\nplt.savefig(filepath, dpi=300, bbox_inches=\"tight\")\n\nplt.show()"
  },
  {
    "objectID": "tmp/code/01-boundaries.html#select-relevant-columns",
    "href": "tmp/code/01-boundaries.html#select-relevant-columns",
    "title": "Town-Level Administrative Boundaries of Bicol Region",
    "section": "3 Select relevant columns",
    "text": "3 Select relevant columns\n\ngdf_boundaries = gdf_boundaries[[\"ADM3_EN\", \"ADM2_EN\", \"geometry\"]]\ngdf_boundaries = gdf_boundaries.rename(columns={\"ADM3_EN\": \"town\", \"ADM2_EN\": \"province\"})\ngdf_boundaries.head()\n\n\n\n\n\n\n\n\ntown\nprovince\ngeometry\n\n\n\n\n0\nBacacay\nAlbay\nMULTIPOLYGON (((123.84193 13.3341, 123.84204 1...\n\n\n1\nCamalig\nAlbay\nMULTIPOLYGON (((123.6559 13.06131, 123.65536 1...\n\n\n2\nDaraga (Locsin)\nAlbay\nMULTIPOLYGON (((123.71487 13.03995, 123.71474 ...\n\n\n3\nGuinobatan\nAlbay\nMULTIPOLYGON (((123.68355 13.25321, 123.67729 ...\n\n\n4\nJovellar\nAlbay\nMULTIPOLYGON (((123.6559 13.06131, 123.65568 1..."
  },
  {
    "objectID": "tmp/code/01-boundaries.html#format-town-names",
    "href": "tmp/code/01-boundaries.html#format-town-names",
    "title": "Town-Level Administrative Boundaries of Bicol Region",
    "section": "4 Format town names",
    "text": "4 Format town names\n\n# Remove old names written in parentheses\ngdf_boundaries[\"town\"] = gdf_boundaries[\"town\"].str.replace(r\"\\s*\\(.*\\)\", \"\", regex=True)\n\n# Replace \"City of\" prefix with \"City\" suffix\nmask = gdf_boundaries[\"town\"].str.startswith(\"City of \", na=False)\ngdf_boundaries.loc[mask, \"town\"] = gdf_boundaries[\"town\"].str.removeprefix(\"City of \")\ngdf_boundaries.loc[mask, \"town\"] = gdf_boundaries[\"town\"].apply(lambda x: f\"{x.strip()} City\")\n\ngdf_boundaries[\"town\"].unique()\n\narray(['Bacacay', 'Camalig', 'Daraga', 'Guinobatan', 'Jovellar',\n       'Legazpi City', 'Libon', 'Ligao City', 'Malilipot', 'Malinao',\n       'Manito', 'Oas', 'Pio Duran', 'Polangui', 'Rapu-Rapu',\n       'Santo Domingo', 'Tabaco City', 'Tiwi', 'Basud', 'Capalonga',\n       'Daet', 'San Lorenzo Ruiz', 'Jose Panganiban', 'Labo', 'Mercedes',\n       'Paracale', 'San Vicente', 'Santa Elena', 'Talisay', 'Vinzons',\n       'Baao', 'Balatan', 'Bato', 'Bombon', 'Buhi', 'Bula', 'Cabusao',\n       'Calabanga', 'Camaligan', 'Canaman', 'Caramoan', 'Del Gallego',\n       'Gainza', 'Garchitorena', 'Goa', 'Iriga City', 'Lagonoy',\n       'Libmanan', 'Lupi', 'Magarao', 'Milaor', 'Minalabac', 'Nabua',\n       'Naga City', 'Ocampo', 'Pamplona', 'Pasacao', 'Pili',\n       'Presentacion', 'Ragay', 'Sagñay', 'San Fernando', 'San Jose',\n       'Sipocot', 'Siruma', 'Tigaon', 'Tinambac', 'Bagamanoc', 'Baras',\n       'Caramoran', 'Gigmoto', 'Pandan', 'Panganiban', 'San Andres',\n       'San Miguel', 'Viga', 'Virac', 'Aroroy', 'Baleno', 'Balud',\n       'Batuan', 'Cataingan', 'Cawayan', 'Claveria', 'Dimasalang',\n       'Esperanza', 'Mandaon', 'Masbate City', 'Milagros', 'Mobo',\n       'Monreal', 'Palanas', 'Pio V. Corpus', 'Placer', 'San Jacinto',\n       'San Pascual', 'Uson', 'Barcelona', 'Bulan', 'Bulusan',\n       'Casiguran', 'Castilla', 'Donsol', 'Gubat', 'Irosin', 'Juban',\n       'Magallanes', 'Matnog', 'Pilar', 'Prieto Diaz', 'Santa Magdalena',\n       'Sorsogon City'], dtype=object)"
  },
  {
    "objectID": "tmp/code/01-boundaries.html#save-data-into-file",
    "href": "tmp/code/01-boundaries.html#save-data-into-file",
    "title": "Town-Level Administrative Boundaries of Bicol Region",
    "section": "5 Save data into file",
    "text": "5 Save data into file\n\nfilepath = os.path.join(OUTPUT_DIR, \"boundaries.gpkg\")\ngdf_boundaries.to_file(filepath, driver=\"GPKG\")"
  },
  {
    "objectID": "tmp/code/01-transport-network.html",
    "href": "tmp/code/01-transport-network.html",
    "title": "Modeling the transport network of Bicol Region",
    "section": "",
    "text": "import os\nimport warnings\n\nimport contextily as cx\nimport geopandas as gpd\nimport igraph as ig\nimport matplotlib.pyplot as plt\nimport networkx as nx\nimport numpy as np\nimport osmnx as ox\nimport pandas as pd\nfrom geopy.distance import geodesic\nfrom matplotlib.axes import Axes\nfrom networkx import Graph\nfrom scipy.spatial import cKDTree\n\nwarnings.filterwarnings(\"ignore\")\n\n\n\n\n\nBASE_PATH = \"./outputs\"\n\nif not os.path.exists(BASE_PATH):\n    os.makedirs(BASE_PATH)\n\n\n\n\n\ndef plot_with_basemap(\n    ax: Axes,\n    gdf: gpd.GeoDataFrame,\n    title: str,\n    filename: str = None,\n    padding: float = 0.1,\n) -&gt; None:\n    x_min, y_min, x_max, y_max = gdf.total_bounds\n    ax.set_xlim(x_min - padding, x_max + padding)\n    ax.set_ylim(y_min - padding, y_max + padding)\n\n    cx.add_basemap(\n        ax,\n        crs=gdf.crs,\n        source=cx.providers.CartoDB.Positron,\n        attribution=\"\",\n    )\n\n    ax.set_title(title)\n    ax.set_axis_off()\n    plt.tight_layout()\n\n    if filename:\n        filepath = os.path.join(BASE_PATH, filename)\n        plt.savefig(filepath, dpi=300, bbox_inches=\"tight\")\n\n    plt.show()"
  },
  {
    "objectID": "tmp/code/01-transport-network.html#preliminaries",
    "href": "tmp/code/01-transport-network.html#preliminaries",
    "title": "Modeling the transport network of Bicol Region",
    "section": "",
    "text": "import os\nimport warnings\n\nimport contextily as cx\nimport geopandas as gpd\nimport igraph as ig\nimport matplotlib.pyplot as plt\nimport networkx as nx\nimport numpy as np\nimport osmnx as ox\nimport pandas as pd\nfrom geopy.distance import geodesic\nfrom matplotlib.axes import Axes\nfrom networkx import Graph\nfrom scipy.spatial import cKDTree\n\nwarnings.filterwarnings(\"ignore\")\n\n\n\n\n\nBASE_PATH = \"./outputs\"\n\nif not os.path.exists(BASE_PATH):\n    os.makedirs(BASE_PATH)\n\n\n\n\n\ndef plot_with_basemap(\n    ax: Axes,\n    gdf: gpd.GeoDataFrame,\n    title: str,\n    filename: str = None,\n    padding: float = 0.1,\n) -&gt; None:\n    x_min, y_min, x_max, y_max = gdf.total_bounds\n    ax.set_xlim(x_min - padding, x_max + padding)\n    ax.set_ylim(y_min - padding, y_max + padding)\n\n    cx.add_basemap(\n        ax,\n        crs=gdf.crs,\n        source=cx.providers.CartoDB.Positron,\n        attribution=\"\",\n    )\n\n    ax.set_title(title)\n    ax.set_axis_off()\n    plt.tight_layout()\n\n    if filename:\n        filepath = os.path.join(BASE_PATH, filename)\n        plt.savefig(filepath, dpi=300, bbox_inches=\"tight\")\n\n    plt.show()"
  },
  {
    "objectID": "tmp/code/01-transport-network.html#prepare-the-administrative-boundaries",
    "href": "tmp/code/01-transport-network.html#prepare-the-administrative-boundaries",
    "title": "Modeling the transport network of Bicol Region",
    "section": "1 Prepare the administrative boundaries",
    "text": "1 Prepare the administrative boundaries\n\n1.1 Download data from HDX\n\ngdf_boundaries = gpd.read_file(\n    filename=\"https://data.humdata.org/dataset/caf116df-f984-4deb-85ca-41b349d3f313/resource/314cbaea-c7a0-4ce9-a4ea-e5af2a788ac1/download/phl_adm_psa_namria_20231106_gdb.gdb.zip\",\n    layer=\"phl_admbnda_adm3_psa_namria_20231106\",\n)\ngdf_boundaries.head()\n\n\n\n\n\n\n\n\nADM3_EN\nADM3_PCODE\nADM2_EN\nADM2_PCODE\nADM1_EN\nADM1_PCODE\nADM0_EN\nADM0_PCODE\ndate\nvalidOn\nvalidTo\nADM3_REF\nADM3ALT1EN\nShape_Length\nShape_Area\nAREA_SQKM\ngeometry\n\n\n\n\n0\nAdams\nPH0102801\nIlocos Norte\nPH01028\nRegion I (Ilocos Region)\nPH01\nPhilippines (the)\nPH\n2022-11-09 00:00:00+00:00\n2023-11-06 00:00:00+00:00\nNaT\nNone\nNone\n0.423604\n0.009506\n111.143026\nMULTIPOLYGON (((120.96915 18.51012, 120.95867 ...\n\n\n1\nBacarra\nPH0102802\nIlocos Norte\nPH01028\nRegion I (Ilocos Region)\nPH01\nPhilippines (the)\nPH\n2022-11-09 00:00:00+00:00\n2023-11-06 00:00:00+00:00\nNaT\nNone\nNone\n0.309136\n0.004725\n55.303195\nMULTIPOLYGON (((120.66821 18.28705, 120.66441 ...\n\n\n2\nBadoc\nPH0102803\nIlocos Norte\nPH01028\nRegion I (Ilocos Region)\nPH01\nPhilippines (the)\nPH\n2022-11-09 00:00:00+00:00\n2023-11-06 00:00:00+00:00\nNaT\nNone\nNone\n0.599295\n0.006880\n80.683970\nMULTIPOLYGON (((120.47814 17.97717, 120.47816 ...\n\n\n3\nBangui\nPH0102804\nIlocos Norte\nPH01028\nRegion I (Ilocos Region)\nPH01\nPhilippines (the)\nPH\n2022-11-09 00:00:00+00:00\n2023-11-06 00:00:00+00:00\nNaT\nNone\nNone\n0.483066\n0.009843\n115.059041\nMULTIPOLYGON (((120.81318 18.53457, 120.81358 ...\n\n\n4\nCity of Batac\nPH0102805\nIlocos Norte\nPH01028\nRegion I (Ilocos Region)\nPH01\nPhilippines (the)\nPH\n2022-11-09 00:00:00+00:00\n2023-11-06 00:00:00+00:00\nNaT\nNone\nNone\n0.613500\n0.013493\n158.123132\nMULTIPOLYGON (((120.61242 18.10947, 120.612 18...\n\n\n\n\n\n\n\n\n\n1.2 Limit coverage to Bicol Region\n\nmask = gdf_boundaries[\"ADM1_EN\"].str.contains(\"Bicol\")\ngdf_boundaries = gdf_boundaries[mask].reset_index(drop=True)\n\n\n_, ax = plt.subplots((8, 8)=(8, 8))\n\ngdf_boundaries.plot(\n    ax=ax,\n    edgecolor=\"white\",\n    linewidth=0.5,\n    facecolor=\"seagreen\",\n)\n\nplot_with_basemap(\n    ax=ax,\n    gdf=gdf_boundaries,\n    title=\"Town Boundaries in Bicol Region\",\n    filename=\"boundaries.png\",\n)\n\n\n\n\n\n\n\n\n\n\n1.3 Select relevant columns\n\ngdf_boundaries = gdf_boundaries[[\"ADM3_EN\", \"ADM2_EN\", \"geometry\"]]\ngdf_boundaries = gdf_boundaries.rename(columns={\"ADM3_EN\": \"town\", \"ADM2_EN\": \"province\"})\ngdf_boundaries.head()\n\n\n\n\n\n\n\n\ntown\nprovince\ngeometry\n\n\n\n\n0\nBacacay\nAlbay\nMULTIPOLYGON (((123.84193 13.3341, 123.84204 1...\n\n\n1\nCamalig\nAlbay\nMULTIPOLYGON (((123.6559 13.06131, 123.65536 1...\n\n\n2\nDaraga (Locsin)\nAlbay\nMULTIPOLYGON (((123.71487 13.03995, 123.71474 ...\n\n\n3\nGuinobatan\nAlbay\nMULTIPOLYGON (((123.68355 13.25321, 123.67729 ...\n\n\n4\nJovellar\nAlbay\nMULTIPOLYGON (((123.6559 13.06131, 123.65568 1...\n\n\n\n\n\n\n\n\n\n1.4 Format town names\n\ngdf_boundaries[\"town\"] = gdf_boundaries[\"town\"].str.replace(r\"\\s*\\(.*\\)\", \"\", regex=True)\n\n_ = gdf_boundaries[\"town\"].str.startswith(\"City of \", na=False)\ngdf_boundaries.loc[_, \"town\"] = gdf_boundaries[\"town\"].str.removeprefix(\"City of \")\ngdf_boundaries.loc[_, \"town\"] = gdf_boundaries[\"town\"].apply(lambda x: f\"{x.strip()} City\")\n\ngdf_boundaries[\"town\"].unique()\n\narray(['Bacacay', 'Camalig', 'Daraga', 'Guinobatan', 'Jovellar',\n       'Legazpi City', 'Libon', 'Ligao City', 'Malilipot', 'Malinao',\n       'Manito', 'Oas', 'Pio Duran', 'Polangui', 'Rapu-Rapu',\n       'Santo Domingo', 'Tabaco City', 'Tiwi', 'Basud', 'Capalonga',\n       'Daet', 'San Lorenzo Ruiz', 'Jose Panganiban', 'Labo', 'Mercedes',\n       'Paracale', 'San Vicente', 'Santa Elena', 'Talisay', 'Vinzons',\n       'Baao', 'Balatan', 'Bato', 'Bombon', 'Buhi', 'Bula', 'Cabusao',\n       'Calabanga', 'Camaligan', 'Canaman', 'Caramoan', 'Del Gallego',\n       'Gainza', 'Garchitorena', 'Goa', 'Iriga City', 'Lagonoy',\n       'Libmanan', 'Lupi', 'Magarao', 'Milaor', 'Minalabac', 'Nabua',\n       'Naga City', 'Ocampo', 'Pamplona', 'Pasacao', 'Pili',\n       'Presentacion', 'Ragay', 'Sagñay', 'San Fernando', 'San Jose',\n       'Sipocot', 'Siruma', 'Tigaon', 'Tinambac', 'Bagamanoc', 'Baras',\n       'Caramoran', 'Gigmoto', 'Pandan', 'Panganiban', 'San Andres',\n       'San Miguel', 'Viga', 'Virac', 'Aroroy', 'Baleno', 'Balud',\n       'Batuan', 'Cataingan', 'Cawayan', 'Claveria', 'Dimasalang',\n       'Esperanza', 'Mandaon', 'Masbate City', 'Milagros', 'Mobo',\n       'Monreal', 'Palanas', 'Pio V. Corpus', 'Placer', 'San Jacinto',\n       'San Pascual', 'Uson', 'Barcelona', 'Bulan', 'Bulusan',\n       'Casiguran', 'Castilla', 'Donsol', 'Gubat', 'Irosin', 'Juban',\n       'Magallanes', 'Matnog', 'Pilar', 'Prieto Diaz', 'Santa Magdalena',\n       'Sorsogon City'], dtype=object)\n\n\n\ngdf_boundaries.to_file(os.path.join(BASE_PATH, \"boundaries.gpkg\"), driver=\"GPKG\")"
  },
  {
    "objectID": "tmp/code/01-transport-network.html#build-the-transport-network",
    "href": "tmp/code/01-transport-network.html#build-the-transport-network",
    "title": "Modeling the transport network of Bicol Region",
    "section": "2 Build the transport network",
    "text": "2 Build the transport network\n\ndef get_labeled_undirected_graph(\n    G: nx.MultiDiGraph,\n    mode: str,\n) -&gt; nx.MultiGraph:\n    G = G.to_undirected()\n\n    for _, data in G.nodes(data=True):\n        data[\"mode\"] = mode\n    for _, _, data in G.edges(data=True):\n        data[\"mode\"] = mode\n\n    return G\n\n\n2.1 Download road network from OSM\n\ngraph_roads = ox.graph_from_place(\n    \"Bicol Region\",\n    network_type=\"drive_service\",\n    simplify=False,\n    retain_all=True,\n)\n\ngraph_roads = get_labeled_undirected_graph(graph_roads, \"road\")\n\nlen(graph_roads.nodes), len(graph_roads.edges)\n\n(446869, 460990)\n\n\n\n_, ax = plt.subplots((8, 8)=(8, 8))\n\nox.plot_graph(\n    graph_roads,\n    ax=ax,\n    node_size=0,\n    edge_color=\"seagreen\",\n    edge_linewidth=0.5,\n    show=False,\n    close=False,\n)\n\nplot_with_basemap(\n    ax=ax,\n    gdf=gdf_boundaries,\n    title=\"Road Network in Bicol Region\",\n    filename=\"road_network.png\",\n)\n\n\n\n\n\n\n\n\n\nox.save_graphml(graph_roads, filepath=os.path.join(BASE_PATH, \"road_network.graphml\"))\n\n\n\n2.2 Identify accessible towns by road\n\ndef get_accessible_towns(\n    graph: nx.Graph,\n    gdf: gpd.GeoDataFrame,\n    origin_town: str,\n) -&gt; pd.Series:\n    origin_point = gdf[gdf[\"town\"] == origin_town].union_all().centroid\n    origin_node = ox.nearest_nodes(graph, origin_point.x, origin_point.y)\n\n    reachable_nodes = {origin_node} | nx.descendants(graph, origin_node)\n    reachable_subgraph = graph.subgraph(reachable_nodes)\n    gdf_reachable_edges = ox.graph_to_gdfs(\n        reachable_subgraph,\n        nodes=False,\n        edges=True,\n    )\n\n    if gdf_reachable_edges.empty:\n        reachable_towns = set()\n    else:\n        gdf_reachable_towns = gpd.sjoin(\n            gdf,\n            gdf_reachable_edges,\n            how=\"inner\",\n            predicate=\"intersects\",\n        )\n        reachable_towns = set(gdf_reachable_towns[\"town\"].unique())\n\n    return gdf[\"town\"].isin(reachable_towns)\n\n\ndef plot_accessibility_map(\n    gdf: gpd.GeoDataFrame,\n    column: str,\n    origin_town: str,\n    title: str,\n    filename: str = None,\n) -&gt; None:\n    _, ax = plt.subplots((8, 8)=(8, 8))\n\n    origin = gdf[gdf[\"town\"] == origin_town]\n    accessible = gdf[gdf[column]]\n    inaccessible = gdf[~gdf[column]]\n\n    accessible.plot(\n        ax=ax,\n        color=\"seagreen\",\n        edgecolor=\"white\",\n        linewidth=0.5,\n        label=\"Accessible\",\n    )\n\n    origin.plot(\n        ax=ax,\n        color=\"peru\",\n        edgecolor=\"white\",\n        linewidth=0.5,\n        label=\"Origin\",\n    )\n\n    if not inaccessible.empty:\n        inaccessible.plot(\n            ax=ax,\n            color=\"firebrick\",\n            edgecolor=\"white\",\n            linewidth=0.5,\n            label=\"Inaccessible\",\n        )\n\n    plot_with_basemap(ax=ax, gdf=gdf, title=title, filename=filename)\n\n\norigin_town = \"Legazpi City\"\ncolumn = \"initial_access\"\n\ngdf_boundaries[column] = get_accessible_towns(\n    graph=graph_roads,\n    gdf=gdf_boundaries.copy(),\n    origin_town=origin_town,\n)\n\nplot_accessibility_map(\n    gdf=gdf_boundaries,\n    column=column,\n    origin_town=origin_town,\n    title=f\"Town Accessibility from {origin_town} via Road Network\",\n    filename=\"initial_accessibility_map.png\",\n)\n\n\n\n\n\n\n\n\n\n\n2.3 Download ferry routes from OSM\n\ngraph_ferry = ox.graph_from_place(\n    \"Bicol Region\",\n    custom_filter='[\"route\"=\"ferry\"]',\n    retain_all=True,\n    simplify=False,\n)\n\ngraph_ferry = get_labeled_undirected_graph(graph_ferry, \"ferry\")\n\nlen(graph_ferry.nodes), len(graph_ferry.edges)\n\n(1087, 1060)\n\n\n\n_, ax = plt.subplots((8, 8)=(8, 8))\n\nox.plot_graph(\n    graph_ferry,\n    ax=ax,\n    node_size=0,\n    edge_color=\"royalblue\",\n    edge_linewidth=1.5,\n    show=False,\n    close=False,\n)\n\nplot_with_basemap(\n    ax=ax,\n    gdf=gdf_boundaries,\n    title=\"Ferry Network in Bicol Region\",\n    filename=\"ferry_network.png\",\n)\n\n\n\n\n\n\n\n\n\nox.save_graphml(graph_ferry, filepath=os.path.join(BASE_PATH, \"ferry_network.graphml\"))\n\n\n\n2.4 Merge the networks\n\ndef merge_networks(\n    graph_roads: nx.MultiDiGraph,\n    graph_ferry: nx.MultiDiGraph,\n    max_dist_m: int = 500,\n) -&gt; nx.MultiDiGraph:\n    graph_merged = nx.compose(graph_roads, graph_ferry)\n\n    nodes = ox.graph_to_gdfs(graph_merged, edges=False)[[\"x\", \"y\", \"mode\"]]\n    ferry_nodes = nodes[nodes[\"mode\"] == \"ferry\"]\n    road_nodes = nodes[nodes[\"mode\"] == \"road\"]\n    tree = cKDTree(road_nodes[[\"y\", \"x\"]].values)\n\n    for s_id, s_data in ferry_nodes.iterrows():\n        s_coord = (s_data[\"y\"], s_data[\"x\"])\n        _, idx = tree.query(s_coord, k=1)\n\n        l_id = road_nodes.index[idx]\n        l_coord = (road_nodes.iloc[idx][\"y\"], road_nodes.iloc[idx][\"x\"])\n        dist_m = geodesic(s_coord, l_coord).meters\n\n        if dist_m &lt;= max_dist_m:\n            for u, v in [(s_id, l_id), (l_id, s_id)]:\n                graph_merged.add_edge(u, v, length=dist_m, mode=\"road\")\n\n    return graph_merged\n\n\ndef remove_isolated_ferry_nodes(graph: nx.MultiDiGraph) -&gt; nx.MultiDiGraph:\n    while True:\n        terminal_nodes_to_remove = []\n        for node, degree in graph.degree():\n            if degree == 1 and graph.nodes[node].get(\"mode\") == \"ferry\":\n                terminal_nodes_to_remove.append(node)\n        if not terminal_nodes_to_remove:\n            break\n        graph.remove_nodes_from(terminal_nodes_to_remove)\n\n    return graph\n\n\ngraph_merged = merge_networks(graph_roads, graph_ferry)\ngraph_merged = remove_isolated_ferry_nodes(graph_merged)\n\ngraph_merged.number_of_nodes(), graph_merged.number_of_edges()\n\n(447510, 462305)\n\n\n\nox.save_graphml(graph_merged, os.path.join(BASE_PATH, \"merged_network_full.graphml\"))\n\n\n\n2.5 Simplify the merged network\n\ngraph_merged = nx.MultiDiGraph(graph_merged)\ngraph_merged = ox.simplify_graph(graph_merged)\ngraph_merged = graph_merged.to_undirected()\n\ngraph_merged.number_of_nodes(), graph_merged.number_of_edges()\n\n(56932, 71895)\n\n\n\n_, ax = plt.subplots((8, 8)=(8, 8))\n\ngdf_edges = ox.graph_to_gdfs(graph_merged, nodes=False)\ngdf_edges = gdf_edges[[\"geometry\", \"mode\"]].reset_index()\n\ngdf_edges[gdf_edges[\"mode\"] == \"road\"].plot(\n    ax=ax,\n    color=\"seagreen\",\n    linewidth=0.8,\n    label=\"Road Network\",\n)\ngdf_edges[gdf_edges[\"mode\"] == \"ferry\"].plot(\n    ax=ax,\n    color=\"royalblue\",\n    linewidth=1.5,\n    label=\"Ferry Routes\",\n)\n\nplot_with_basemap(\n    ax=ax,\n    gdf=gdf_boundaries,\n    title=\"Integrated Road and Ferry Network in Bicol Region\",\n    filename=\"merged_network.png\",\n)\n\n\n\n\n\n\n\n\n\nox.save_graphml(graph_merged, os.path.join(BASE_PATH, \"merged_network_simplified.graphml\"))\n\n\n\n2.6 Identify accessible towns by road and ferry\n\ncolumn = \"final_access\"\n\ngdf_boundaries[column] = get_accessible_towns(\n    graph=graph_merged,\n    gdf=gdf_boundaries.copy(),\n    origin_town=origin_town,\n)\n\nplot_accessibility_map(\n    gdf=gdf_boundaries,\n    column=column,\n    origin_town=origin_town,\n    title=f\"Town Accessibility from {origin_town} via Road and Ferry Network\",\n    filename=\"final_accessibility_map.png\",\n)\n\n\n\n\n\n\n\n\n\ngdf_boundaries.to_file(os.path.join(BASE_PATH, \"boundaries_with_accessibility.gpkg\"), driver=\"GPKG\")"
  },
  {
    "objectID": "tmp/code/01-transport-network.html#analyze-network-properties",
    "href": "tmp/code/01-transport-network.html#analyze-network-properties",
    "title": "Modeling the transport network of Bicol Region",
    "section": "3 Analyze network properties",
    "text": "3 Analyze network properties\n\ndef plot_choropleth(\n    ax: Axes,\n    gdf: gpd.GeoDataFrame,\n    column: str,\n    title: str,\n    cmap: str,\n    filename: str = None,\n):\n    legend_kwds = {\n        \"label\": f\"Average {\" \".join(column.split('_')).title()}\",\n        \"orientation\": \"horizontal\",\n        \"pad\": 0.01,\n        \"shrink\": 0.5,\n    }\n\n    vmin = gdf[column].min()\n    vmax = gdf[column].max()\n    legend_kwds[\"ticks\"] = np.linspace(vmin, vmax, 4)\n    if \"degree\" in column:\n        legend_kwds[\"format\"] = \"%.3e\"\n    else:\n        legend_kwds[\"format\"] = \"%.3f\"\n\n    gdf.plot(\n        column=column,\n        ax=ax,\n        cmap=cmap,\n        legend=True,\n        legend_kwds=legend_kwds,\n        edgecolor=\"white\",\n        linewidth=0.5,\n        vmin=vmin,\n        vmax=vmax,\n    )\n\n    plot_with_basemap(ax=ax, gdf=gdf, title=title, filename=filename)\n\n\n3.1 Visualize node distribution\n\ndef get_node_count_by_town(\n    graph: nx.Graph,\n    gdf_towns: gpd.GeoDataFrame,\n    town_col: str = \"town\",\n    province_col: str = \"province\",\n) -&gt; gpd.GeoDataFrame:\n    gdf_nodes = ox.graph_to_gdfs(graph, edges=False).reset_index()\n    gdf_nodes_in_towns = gpd.sjoin(gdf_nodes, gdf_towns, how=\"inner\", predicate=\"within\")\n    counts = gdf_nodes_in_towns.groupby([town_col, province_col]).size().reset_index(name=\"node_count\")\n\n    gdf_node_counts = gdf_towns[[town_col, province_col, \"geometry\"]].copy()\n    gdf_node_counts = gdf_node_counts.merge(counts, on=[town_col, province_col], how=\"left\")\n    gdf_node_counts[\"node_count\"] = gdf_node_counts[\"node_count\"].fillna(0).astype(int)\n\n    return gdf_node_counts\n\n\ngdf_node_counts = get_node_count_by_town(graph_merged, gdf_boundaries)\ngdf_node_counts[[\"town\", \"node_count\"]].sort_values(by=\"node_count\", ascending=False).head(10)\n\n\n\n\n\n\n\n\ntown\nnode_count\n\n\n\n\n53\nNaga City\n4678\n\n\n5\nLegazpi City\n3524\n\n\n2\nDaraga\n2845\n\n\n113\nSorsogon City\n1940\n\n\n20\nDaet\n1789\n\n\n77\nVirac\n1331\n\n\n57\nPili\n1244\n\n\n16\nTabaco City\n1105\n\n\n7\nLigao City\n1050\n\n\n1\nCamalig\n1028\n\n\n\n\n\n\n\n\n_, ax = plt.subplots((8, 8)=(8, 8))\n\nplot_choropleth(\n    ax=ax,\n    gdf=gdf_node_counts,\n    column=\"node_count\",\n    title=\"Node Count by Town\",\n    cmap=\"Greys\",\n    filename=\"node_count_map.png\",\n)\n\n\n\n\n\n\n\n\n\ngdf_node_counts = gdf_node_counts[[\"town\", \"province\", \"node_count\"]]\ngdf_node_counts.to_csv(os.path.join(BASE_PATH, \"node_counts.csv\"), index=False)\n\n\n\n3.2 Compute centrality measures\n\ndef networkx_to_igraph(nx_graph: nx.Graph) -&gt; ig.Graph:\n    nx_nodes = list(nx_graph.nodes)\n    node_index = {node: idx for idx, node in enumerate(nx_nodes)}\n\n    ig_edges = [(node_index[u], node_index[v]) for u, v in nx_graph.edges()]\n    graph = ig.Graph(edges=ig_edges, directed=False)\n    graph.vs[\"name\"] = [str(n) for n in nx_nodes]\n\n    return graph, list(node_index.keys())\n\n\ngraph_ig, node_index = networkx_to_igraph(graph_merged)\n\n\n# df_centrality = pd.read_csv(os.path.join(BASE_PATH, \"node_metrics.csv\"))\n\ncentralities = {\n    \"osmid\": node_index,\n    \"degree\": graph_ig.degree(),\n    \"closeness\": graph_ig.closeness(normalized=True),\n    \"betweenness\": graph_ig.betweenness(normalized=True),\n}\n\ndf_centrality = pd.DataFrame(centralities)\ndf_centrality.head()\n\n\n\n\n\n\n\n\nosmid\ndegree\ncloseness\nbetweenness\n\n\n\n\n0\n300744370\n0.000053\n0.003119\n0.003929\n\n\n1\n300744933\n0.000053\n0.003071\n0.002748\n\n\n2\n300744970\n0.000053\n0.003209\n0.000208\n\n\n3\n300745522\n0.000053\n0.003549\n0.003817\n\n\n4\n300746507\n0.000053\n0.003476\n0.003332\n\n\n\n\n\n\n\n\ndf_centrality.to_csv(os.path.join(BASE_PATH, \"node_metrics.csv\"), index=False)\n\n\n\n3.4 Compute aggregate metrics\n\ndef get_town_metrics(\n    graph: Graph,\n    gdf_towns: gpd.GeoDataFrame,\n    df_centrality: pd.DataFrame,\n) -&gt; gpd.GeoDataFrame:\n    gdf_towns = gdf_towns[[\"town\", \"province\", \"geometry\"]]\n\n    gdf_nodes = ox.graph_to_gdfs(graph, edges=False).reset_index()\n    gdf_nodes = gdf_nodes[[\"osmid\", \"geometry\"]]\n    gdf_nodes_in_towns = gpd.sjoin(gdf_nodes, gdf_towns, how=\"inner\", predicate=\"within\")\n    df_merged = pd.merge(gdf_nodes_in_towns, df_centrality, on=\"osmid\")\n\n    agg_metrics = {\"degree\": \"mean\", \"betweenness\": \"mean\", \"closeness\": \"mean\"}\n    df_town_metrics = df_merged.groupby([\"town\", \"province\"]).agg(agg_metrics).reset_index()\n    gdf_town_metrics = gdf_towns.merge(df_town_metrics, on=[\"town\", \"province\"])\n\n    return gdf_town_metrics\n\n\ngdf_town_metrics = get_town_metrics(graph_merged, gdf_boundaries, df_centrality)\n\n\nprint(gdf_town_metrics.sort_values(by=\"degree\", ascending=False).head(10)[[\"town\", \"province\", \"degree\"]])\n\n_, ax = plt.subplots((8, 8)=(8, 8))\n\nplot_choropleth(\n    ax=ax,\n    gdf=gdf_town_metrics,\n    column=\"degree\",\n    title=\"Average Degree Centrality\",\n    cmap=\"Greens\",\n    filename=\"degree_centrality_map.png\",\n)\n\n            town         province    degree\n58  Presentacion    Camarines Sur  0.000051\n20          Daet  Camarines Norte  0.000049\n11           Oas            Albay  0.000048\n96   San Jacinto          Masbate  0.000048\n29       Vinzons  Camarines Norte  0.000048\n12     Pio Duran            Albay  0.000048\n53     Naga City    Camarines Sur  0.000047\n49       Magarao    Camarines Sur  0.000047\n73    Panganiban      Catanduanes  0.000047\n77         Virac      Catanduanes  0.000047\n\n\n\n\n\n\n\n\n\n\nprint(gdf_town_metrics.sort_values(by=\"betweenness\", ascending=False).head(10)[[\"town\", \"province\", \"betweenness\"]])\n\n_, ax = plt.subplots((8, 8)=(8, 8))\n\nplot_choropleth(\n    ax=ax,\n    gdf=gdf_town_metrics,\n    column=\"betweenness\",\n    title=\"Average Betweenness Centrality\",\n    cmap=\"Oranges\",\n    filename=\"betweenness_centrality_map.png\",\n)\n\n         town       province  betweenness\n12  Pio Duran          Albay     0.027135\n51  Minalabac  Camarines Sur     0.026748\n6       Libon          Albay     0.018448\n55   Pamplona  Camarines Sur     0.016815\n90       Mobo        Masbate     0.016314\n32       Bato  Camarines Sur     0.014613\n91    Monreal        Masbate     0.013888\n4    Jovellar          Albay     0.013656\n31    Balatan  Camarines Sur     0.013441\n60     Sagñay  Camarines Sur     0.013144\n\n\n\n\n\n\n\n\n\n\nprint(gdf_town_metrics.sort_values(by=\"closeness\", ascending=False).head(10)[[\"town\", \"province\", \"closeness\"]])\n\n_, ax = plt.subplots((8, 8)=(8, 8))\n\nplot_choropleth(\n    ax=ax,\n    gdf=gdf_town_metrics,\n    column=\"closeness\",\n    title=\"Average Closeness Centrality\",\n    cmap=\"Blues\",\n    filename=\"closeness_centrality_map.png\",\n)\n\n          town       province  closeness\n6        Libon          Albay   0.006863\n12   Pio Duran          Albay   0.006788\n32        Bato  Camarines Sur   0.006761\n7   Ligao City          Albay   0.006753\n11         Oas          Albay   0.006740\n4     Jovellar          Albay   0.006706\n31     Balatan  Camarines Sur   0.006532\n13    Polangui          Albay   0.006527\n51   Minalabac  Camarines Sur   0.006508\n35        Bula  Camarines Sur   0.006505"
  },
  {
    "objectID": "tmp/code/05-network-metrics.html",
    "href": "tmp/code/05-network-metrics.html",
    "title": "Transport Network Metrics",
    "section": "",
    "text": "import os\n\nimport geopandas as gpd\nimport networkx as nx\nimport osmnx as ox\nimport pandas as pd\nfrom networkx import Graph\n\n\nBASE_PATH = \"./data\"\nBOUNDARIES_FILE = os.path.join(BASE_PATH, \"boundaries.gpkg\")\nTRANSPORT_NETWORK_FILE = os.path.join(BASE_PATH, \"merged_network_simplified.graphml\")"
  },
  {
    "objectID": "tmp/code/05-network-metrics.html#setup-environment",
    "href": "tmp/code/05-network-metrics.html#setup-environment",
    "title": "Transport Network Metrics",
    "section": "",
    "text": "import os\n\nimport geopandas as gpd\nimport networkx as nx\nimport osmnx as ox\nimport pandas as pd\nfrom networkx import Graph\n\n\nBASE_PATH = \"./data\"\nBOUNDARIES_FILE = os.path.join(BASE_PATH, \"boundaries.gpkg\")\nTRANSPORT_NETWORK_FILE = os.path.join(BASE_PATH, \"merged_network_simplified.graphml\")"
  },
  {
    "objectID": "tmp/code/05-network-metrics.html#load-town-boundaries",
    "href": "tmp/code/05-network-metrics.html#load-town-boundaries",
    "title": "Transport Network Metrics",
    "section": "1 Load town boundaries",
    "text": "1 Load town boundaries\n\ngdf_boundaries = gpd.read_file(BOUNDARIES_FILE)\ngdf_boundaries.head()\n\n\n\n\n\n\n\n\ntown\nprovince\ngeometry\n\n\n\n\n0\nBacacay\nAlbay\nMULTIPOLYGON (((123.84193 13.3341, 123.84204 1...\n\n\n1\nCamalig\nAlbay\nMULTIPOLYGON (((123.6559 13.06131, 123.65536 1...\n\n\n2\nDaraga\nAlbay\nMULTIPOLYGON (((123.71487 13.03995, 123.71474 ...\n\n\n3\nGuinobatan\nAlbay\nMULTIPOLYGON (((123.68355 13.25321, 123.67729 ...\n\n\n4\nJovellar\nAlbay\nMULTIPOLYGON (((123.6559 13.06131, 123.65568 1..."
  },
  {
    "objectID": "tmp/code/05-network-metrics.html#load-transport-network",
    "href": "tmp/code/05-network-metrics.html#load-transport-network",
    "title": "Transport Network Metrics",
    "section": "2 Load transport network",
    "text": "2 Load transport network\n\ngraph_transport = ox.load_graphml(TRANSPORT_NETWORK_FILE)\ngdf_nodes = ox.graph_to_gdfs(graph_transport, edges=False)\ngdf_nodes.head()\n\n\n\n\n\n\n\n\ny\nx\nstreet_count\nmode\nhighway\njunction\nrailway\ngeometry\n\n\nosmid\n\n\n\n\n\n\n\n\n\n\n\n\n300744370\n11.762615\n124.033762\n3\nroad\nNaN\nNaN\nNaN\nPOINT (124.03376 11.76261)\n\n\n300744933\n11.764680\n124.063952\n3\nroad\nNaN\nNaN\nNaN\nPOINT (124.06395 11.76468)\n\n\n300744970\n11.863829\n124.057783\n3\nroad\nNaN\nNaN\nNaN\nPOINT (124.05778 11.86383)\n\n\n300745522\n11.910286\n123.908284\n3\nroad\nNaN\nNaN\nNaN\nPOINT (123.90828 11.91029)\n\n\n300746507\n11.964546\n123.991640\n3\nroad\nNaN\nNaN\nNaN\nPOINT (123.99164 11.96455)"
  },
  {
    "objectID": "tmp/code/05-network-metrics.html#compute-centrality-measures-for-all-nodes",
    "href": "tmp/code/05-network-metrics.html#compute-centrality-measures-for-all-nodes",
    "title": "Transport Network Metrics",
    "section": "3 Compute centrality measures for all nodes",
    "text": "3 Compute centrality measures for all nodes\n\nfilepath = os.path.join(BASE_PATH, \"centrality_measures.csv\")\n\n\ngdf_nodes[\"degree\"] = gdf_nodes.index.map(nx.degree_centrality(graph_transport))\ngdf_nodes[[\"degree\"]].to_csv(filepath)\ngdf_nodes[\"degree\"].describe()\n\ncount    56932.000000\nmean         0.000044\nstd          0.000019\nmin          0.000018\n25%          0.000018\n50%          0.000053\n75%          0.000053\nmax          0.000474\nName: degree, dtype: float64\n\n\n\ngdf_nodes[\"closeness\"] = gdf_nodes.index.map(nx.closeness_centrality(graph_transport))\ngdf_nodes[[\"degree\", \"closeness\"]].to_csv(filepath)\ngdf_nodes[\"closeness\"].describe()\n\ncount    56932.000000\nmean         0.004952\nstd          0.001122\nmin          0.000018\n25%          0.004071\n50%          0.005072\n75%          0.005756\nmax          0.007339\nName: closeness, dtype: float64\n\n\n\ngdf_nodes[\"betweenness\"] = gdf_nodes.index.map(nx.betweenness_centrality(graph_transport))\ngdf_nodes[[\"degree\", \"closeness\", \"betweenness\"]].to_csv(filepath)\ngdf_nodes[\"betweenness\"].describe()\n\ncount    56932.000000\nmean         0.003582\nstd          0.019033\nmin          0.000000\n25%          0.000000\n50%          0.000070\n75%          0.000460\nmax          0.390183\nName: betweenness, dtype: float64"
  },
  {
    "objectID": "tmp/code/05-network-metrics.html#compute-average-metrics-for-each-town",
    "href": "tmp/code/05-network-metrics.html#compute-average-metrics-for-each-town",
    "title": "Transport Network Metrics",
    "section": "4 Compute average metrics for each town",
    "text": "4 Compute average metrics for each town\n\ndef calculate_town_metrics(\n    town_name: str,\n    boundaries_gdf: gpd.GeoDataFrame,\n    nodes_gdf: gpd.GeoDataFrame,\n    full_graph: nx.Graph,\n) -&gt; dict:\n    \"\"\"Calculates all transport network metrics for a single town.\"\"\"\n    town_metrics = {\"town\": town_name}\n    town_boundary = boundaries_gdf[boundaries_gdf[\"town\"] == town_name]\n\n    nodes_in_town = gpd.sjoin(nodes_gdf, town_boundary, how=\"inner\", predicate=\"within\")\n    town_metrics[\"avg_degree\"] = nodes_in_town[\"degree\"].mean()\n    town_metrics[\"avg_betweenness\"] = nodes_in_town[\"betweenness\"].mean()\n    town_metrics[\"avg_closeness\"] = nodes_in_town[\"closeness\"].mean()\n\n    town_subgraph = full_graph.subgraph(nodes_in_town.index)\n\n    # if not nx.is_connected(town_subgraph):\n    #     largest_cc = max(nx.connected_components(town_subgraph), key=len)\n    #     subgraph_for_analysis = town_subgraph.subgraph(largest_cc)\n    # else:\n    #     subgraph_for_analysis = town_subgraph\n\n    town_metrics[\"network_density\"] = nx.density(town_subgraph)\n    town_metrics[\"avg_clustering\"] = nx.average_clustering(Graph(town_subgraph))\n    # town_metrics[\"network_diameter\"] = nx.diameter(subgraph_for_analysis)\n    # town_metrics[\"avg_path_length\"] = nx.average_shortest_path_length(subgraph_for_analysis)\n\n    return town_metrics\n\n\nall_town_metrics = [\n    calculate_town_metrics(town_name, gdf_boundaries, gdf_nodes.copy(), graph_transport)\n    for town_name in sorted(gdf_boundaries[\"town\"].unique())\n]\n\ndf_town_metrics = pd.DataFrame(all_town_metrics).set_index(\"town\")\ndf_town_metrics.head()\n\n\n\n\n\n\n\n\navg_degree\navg_betweenness\navg_closeness\nnetwork_density\navg_clustering\n\n\ntown\n\n\n\n\n\n\n\n\n\nAroroy\n0.000043\n0.001804\n0.005285\n0.003937\n0.042272\n\n\nBaao\n0.000043\n0.001849\n0.005981\n0.004325\n0.025000\n\n\nBacacay\n0.000042\n0.001171\n0.004564\n0.004248\n0.020644\n\n\nBagamanoc\n0.000042\n0.000905\n0.003034\n0.014739\n0.056911\n\n\nBalatan\n0.000045\n0.013441\n0.006532\n0.013931\n0.038251\n\n\n\n\n\n\n\n\nfilepath = os.path.join(BASE_PATH, \"town_metrics.csv\")\ndf_town_metrics.to_csv(filepath, index=True)"
  },
  {
    "objectID": "01-boundaries.html",
    "href": "01-boundaries.html",
    "title": "Town Boundaries of Bicol Region",
    "section": "",
    "text": "This notebook prepares the study area’s geographical data. It downloads Philippine administrative boundaries, filters them to isolate the Bicol Region, and cleans the town names before saving the data."
  },
  {
    "objectID": "01-boundaries.html#preliminaries",
    "href": "01-boundaries.html#preliminaries",
    "title": "Town Boundaries of Bicol Region",
    "section": "0 Preliminaries",
    "text": "0 Preliminaries\n\nimport os\n\nimport contextily as cx\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nfrom matplotlib.axes import Axes\n\n\nBASE_PATH = os.path.join(\".\", \"outputs\")\n\nif not os.path.exists(BASE_PATH):\n    os.makedirs(BASE_PATH)"
  },
  {
    "objectID": "01-boundaries.html#load-data-from-humanitarian-data-exchange",
    "href": "01-boundaries.html#load-data-from-humanitarian-data-exchange",
    "title": "Town Boundaries of Bicol Region",
    "section": "1 Load data from Humanitarian Data Exchange",
    "text": "1 Load data from Humanitarian Data Exchange\n\nfilename = (\n    \"https://data.humdata.org/dataset/caf116df-f984-4deb-85ca-41b349d3f313/resource/\"\n    \"314cbaea-c7a0-4ce9-a4ea-e5af2a788ac1/download/phl_adm_psa_namria_20231106_gdb.gdb.zip\"\n)\n\ngdf_bounds = gpd.read_file(filename, layer=\"phl_admbnda_adm3_psa_namria_20231106\")\ngdf_bounds.head()\n\n/home/ainz/Code/transport-network-analysis/.venv/lib64/python3.13/site-packages/pyogrio/raw.py:198: RuntimeWarning: organizePolygons() received a polygon with more than 100 parts.  The processing may be really slow.  You can skip the processing by setting METHOD=SKIP.\n  return ogr_read(\n\n\n\n\n\n\n\n\n\nADM3_EN\nADM3_PCODE\nADM2_EN\nADM2_PCODE\nADM1_EN\nADM1_PCODE\nADM0_EN\nADM0_PCODE\ndate\nvalidOn\nvalidTo\nADM3_REF\nADM3ALT1EN\nShape_Length\nShape_Area\nAREA_SQKM\ngeometry\n\n\n\n\n0\nAdams\nPH0102801\nIlocos Norte\nPH01028\nRegion I (Ilocos Region)\nPH01\nPhilippines (the)\nPH\n2022-11-09 00:00:00+00:00\n2023-11-06 00:00:00+00:00\nNaT\nNone\nNone\n0.423604\n0.009506\n111.143026\nMULTIPOLYGON (((120.96915 18.51012, 120.95867 ...\n\n\n1\nBacarra\nPH0102802\nIlocos Norte\nPH01028\nRegion I (Ilocos Region)\nPH01\nPhilippines (the)\nPH\n2022-11-09 00:00:00+00:00\n2023-11-06 00:00:00+00:00\nNaT\nNone\nNone\n0.309136\n0.004725\n55.303195\nMULTIPOLYGON (((120.66821 18.28705, 120.66441 ...\n\n\n2\nBadoc\nPH0102803\nIlocos Norte\nPH01028\nRegion I (Ilocos Region)\nPH01\nPhilippines (the)\nPH\n2022-11-09 00:00:00+00:00\n2023-11-06 00:00:00+00:00\nNaT\nNone\nNone\n0.599295\n0.006880\n80.683970\nMULTIPOLYGON (((120.47814 17.97717, 120.47816 ...\n\n\n3\nBangui\nPH0102804\nIlocos Norte\nPH01028\nRegion I (Ilocos Region)\nPH01\nPhilippines (the)\nPH\n2022-11-09 00:00:00+00:00\n2023-11-06 00:00:00+00:00\nNaT\nNone\nNone\n0.483066\n0.009843\n115.059041\nMULTIPOLYGON (((120.81318 18.53457, 120.81358 ...\n\n\n4\nCity of Batac\nPH0102805\nIlocos Norte\nPH01028\nRegion I (Ilocos Region)\nPH01\nPhilippines (the)\nPH\n2022-11-09 00:00:00+00:00\n2023-11-06 00:00:00+00:00\nNaT\nNone\nNone\n0.613500\n0.013493\n158.123132\nMULTIPOLYGON (((120.61242 18.10947, 120.612 18..."
  },
  {
    "objectID": "01-boundaries.html#limit-coverage-to-bicol-region",
    "href": "01-boundaries.html#limit-coverage-to-bicol-region",
    "title": "Town Boundaries of Bicol Region",
    "section": "2 Limit coverage to Bicol Region",
    "text": "2 Limit coverage to Bicol Region\n\ngdf_bounds = gdf_bounds[gdf_bounds[\"ADM1_EN\"].str.contains(\"Bicol\")]\ngdf_bounds = gdf_bounds.reset_index(drop=True)\n\n\n_, ax = plt.subplots(figsize=(8, 8))\n\ngdf_bounds.plot(ax=ax, edgecolor=\"white\", facecolor=\"seagreen\", linewidth=0.5)\n\nx_min, y_min, x_max, y_max = gdf_bounds.total_bounds\npadding = 0.1\nax.set_xlim(x_min - padding, x_max + padding)\nax.set_ylim(y_min - padding, y_max + padding)\n\ncx.add_basemap(\n    ax,\n    crs=gdf_bounds.crs,\n    source=cx.providers.CartoDB.Positron,\n    attribution=\"\",\n)\n\nax.set_title(\"Town Boundaries of Bicol Region\")\nax.set_axis_off()\nplt.tight_layout()\n\nfilepath = os.path.join(BASE_PATH, \"boundaries.png\")\nplt.savefig(filepath, dpi=300, bbox_inches=\"tight\")\n\nplt.show()"
  },
  {
    "objectID": "01-boundaries.html#select-relevant-columns",
    "href": "01-boundaries.html#select-relevant-columns",
    "title": "Town Boundaries of Bicol Region",
    "section": "3 Select relevant columns",
    "text": "3 Select relevant columns\n\ngdf_bounds = gdf_bounds[[\"ADM3_EN\", \"ADM2_EN\", \"geometry\"]]\ngdf_bounds = gdf_bounds.rename(columns={\"ADM3_EN\": \"town\", \"ADM2_EN\": \"province\"})\ngdf_bounds.head()\n\n\n\n\n\n\n\n\ntown\nprovince\ngeometry\n\n\n\n\n0\nBacacay\nAlbay\nMULTIPOLYGON (((123.84193 13.3341, 123.84204 1...\n\n\n1\nCamalig\nAlbay\nMULTIPOLYGON (((123.6559 13.06131, 123.65536 1...\n\n\n2\nDaraga (Locsin)\nAlbay\nMULTIPOLYGON (((123.71487 13.03995, 123.71474 ...\n\n\n3\nGuinobatan\nAlbay\nMULTIPOLYGON (((123.68355 13.25321, 123.67729 ...\n\n\n4\nJovellar\nAlbay\nMULTIPOLYGON (((123.6559 13.06131, 123.65568 1..."
  },
  {
    "objectID": "01-boundaries.html#format-town-names",
    "href": "01-boundaries.html#format-town-names",
    "title": "Town Boundaries of Bicol Region",
    "section": "4 Format town names",
    "text": "4 Format town names\n\ngdf_bounds[\"town\"] = gdf_bounds[\"town\"].str.replace(r\"\\s*\\(.*\\)\", \"\", regex=True)\n\nmask = gdf_bounds[\"town\"].str.startswith(\"City of \", na=False)\ngdf_bounds.loc[mask, \"town\"] = gdf_bounds[\"town\"].str.removeprefix(\"City of \")\ngdf_bounds.loc[mask, \"town\"] = gdf_bounds[\"town\"] + \" City\"\n\ngdf_bounds[\"town\"].unique()\n\narray(['Bacacay', 'Camalig', 'Daraga', 'Guinobatan', 'Jovellar',\n       'Legazpi City', 'Libon', 'Ligao City', 'Malilipot', 'Malinao',\n       'Manito', 'Oas', 'Pio Duran', 'Polangui', 'Rapu-Rapu',\n       'Santo Domingo', 'Tabaco City', 'Tiwi', 'Basud', 'Capalonga',\n       'Daet', 'San Lorenzo Ruiz', 'Jose Panganiban', 'Labo', 'Mercedes',\n       'Paracale', 'San Vicente', 'Santa Elena', 'Talisay', 'Vinzons',\n       'Baao', 'Balatan', 'Bato', 'Bombon', 'Buhi', 'Bula', 'Cabusao',\n       'Calabanga', 'Camaligan', 'Canaman', 'Caramoan', 'Del Gallego',\n       'Gainza', 'Garchitorena', 'Goa', 'Iriga City', 'Lagonoy',\n       'Libmanan', 'Lupi', 'Magarao', 'Milaor', 'Minalabac', 'Nabua',\n       'Naga City', 'Ocampo', 'Pamplona', 'Pasacao', 'Pili',\n       'Presentacion', 'Ragay', 'Sagñay', 'San Fernando', 'San Jose',\n       'Sipocot', 'Siruma', 'Tigaon', 'Tinambac', 'Bagamanoc', 'Baras',\n       'Caramoran', 'Gigmoto', 'Pandan', 'Panganiban', 'San Andres',\n       'San Miguel', 'Viga', 'Virac', 'Aroroy', 'Baleno', 'Balud',\n       'Batuan', 'Cataingan', 'Cawayan', 'Claveria', 'Dimasalang',\n       'Esperanza', 'Mandaon', 'Masbate City', 'Milagros', 'Mobo',\n       'Monreal', 'Palanas', 'Pio V. Corpus', 'Placer', 'San Jacinto',\n       'San Pascual', 'Uson', 'Barcelona', 'Bulan', 'Bulusan',\n       'Casiguran', 'Castilla', 'Donsol', 'Gubat', 'Irosin', 'Juban',\n       'Magallanes', 'Matnog', 'Pilar', 'Prieto Diaz', 'Santa Magdalena',\n       'Sorsogon City'], dtype=object)"
  },
  {
    "objectID": "01-boundaries.html#save-data",
    "href": "01-boundaries.html#save-data",
    "title": "Town Boundaries of Bicol Region",
    "section": "5 Save data",
    "text": "5 Save data\n\nfilepath = os.path.join(BASE_PATH, \"boundaries.gpkg\")\ngdf_bounds.to_file(filepath, driver=\"GPKG\")"
  },
  {
    "objectID": "06-damage-simulation.html",
    "href": "06-damage-simulation.html",
    "title": "Damage Simulation",
    "section": "",
    "text": "This notebook simulates the impact of storms on the efficiency of the transport network. For each storm swath, it removes a percentage of nodes using various strategies and recalculates travel times to measure the degradation in delivery efficiency."
  },
  {
    "objectID": "06-damage-simulation.html#setup-environment",
    "href": "06-damage-simulation.html#setup-environment",
    "title": "Damage Simulation",
    "section": "0 Setup environment",
    "text": "0 Setup environment\n\nimport os\nimport re\nimport warnings\nfrom glob import glob\nfrom itertools import product\n\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom igraph import Graph\nfrom joblib import Parallel, delayed\nfrom shapely.geometry import Point\nfrom tqdm import tqdm\nfrom tqdm.auto import tqdm\n\nwarnings.filterwarnings(\"ignore\")\nnp.random.seed(42)\n\n\nBASE_PATH = \"data\"\nTRANSPORT_NETWORK_FILE = os.path.join(BASE_PATH, \"merged_network_weighted.graphml\")\nCENTRALITY_FILE = os.path.join(BASE_PATH, \"centrality_measures.csv\")\nTRAVEL_TIMES_FILE = os.path.join(BASE_PATH, \"travel_times.csv\")\nSWATHS_DIR = os.path.join(BASE_PATH, \"storm_swath_geometries\")\nRESULTS_DIR = os.path.join(BASE_PATH, \"simulation_results_igraph\")\n\nos.makedirs(RESULTS_DIR, exist_ok=True)\n\nN_STORMS = 200\nDAMAGE_LEVELS = [0.1, 0.2, 0.3, 0.4, 0.5, 1, 2, 3, 4, 5, 10, 20, 30, 40, 50]\nREMOVAL_STRATEGIES = [\"degree\", \"betweenness\", \"closeness\", \"random\"]\n\n\ndef load_graph():\n    G = Graph.Read_GraphML(TRANSPORT_NETWORK_FILE)\n    G.vs[\"osmid\"] = [int(x) for x in G.vs[\"id\"]]\n    G.es[\"segment_time\"] = [float(x) for x in G.es[\"segment_time\"]]\n    return G\n\n\ndef get_removable_nodes(ranked_nodes, damage_level):\n    if not ranked_nodes:\n        return []\n    count = int((damage_level / 100) * len(ranked_nodes))\n    return ranked_nodes[:count]\n\n\ndef compute_new_travel_times(graph, removed_osmids, origins, destinations):\n    remaining_nodes = [v.index for v in graph.vs if v[\"osmid\"] not in removed_osmids]\n    graph_damaged = graph.subgraph(remaining_nodes)\n    updated_idx_map = {v[\"osmid\"]: i for i, v in enumerate(graph_damaged.vs)}\n    travel_times = []\n    for origin, destination in zip(origins, destinations):\n        try:\n            source = updated_idx_map[origin]\n            target = updated_idx_map[destination]\n            time = graph_damaged.distances(source, [target], weights=\"segment_time\")[0][0]\n            travel_times.append(np.inf if time is None else time)\n        except (KeyError, IndexError):\n            travel_times.append(np.inf)\n    return travel_times\n\n\ndef compute_efficiency(base_times, new_times):\n    base_times_arr = np.asarray(base_times)\n    new_times_arr = np.asarray(new_times)\n    n = base_times_arr.size\n    if n == 0:\n        return 0.0\n    ratio = np.zeros_like(base_times_arr, dtype=float)\n    with np.errstate(divide=\"ignore\", invalid=\"ignore\"):\n        np.divide(base_times_arr, new_times_arr, out=ratio, where=new_times_arr != 0)\n    log_term = np.log2(1 + ratio)\n    return np.sum(log_term) / n\n\n\ndef run_storm_task(G, base_times, origins, destinations, sid, ranked_nodes, strategy, level):\n    nodes_to_remove = get_removable_nodes(ranked_nodes, level)\n    new_times = compute_new_travel_times(G, nodes_to_remove, origins, destinations)\n    efficiency = compute_efficiency(base_times, new_times)\n    return {\n        \"storm_id\": sid,\n        \"node_removal_strategy\": strategy,\n        \"damage_level\": level,\n        \"delivery_efficiency\": efficiency,\n    }\n\n\ndef process_storm(storm_id, nodes_in_swaths, df_centrality, origins, destinations, base_times, G):\n    result_file = os.path.join(RESULTS_DIR, f\"storm_{storm_id}.csv\")\n\n    swath_nodes = nodes_in_swaths[nodes_in_swaths[\"SID\"] == storm_id].index.tolist()\n    protected_nodes = set(origins) | set(destinations)\n    removable_nodes = [node for node in swath_nodes if node not in protected_nodes]\n\n    ranked_nodes = {}\n    if removable_nodes:\n        centrality_nodes = df_centrality.loc[removable_nodes]\n        for strategy in [\"degree\", \"betweenness\", \"closeness\"]:\n            ranked_nodes[strategy] = centrality_nodes[strategy].sort_values(ascending=False).index.tolist()\n        ranked_nodes[\"random\"] = list(np.random.permutation(removable_nodes))\n    else:\n        for strategy in REMOVAL_STRATEGIES:\n            ranked_nodes[strategy] = []\n\n    task_args = [\n        (G, base_times, origins, destinations, storm_id, ranked_nodes[strategy], strategy, level)\n        for strategy, level in product(REMOVAL_STRATEGIES, DAMAGE_LEVELS)\n    ]\n\n    results = Parallel(n_jobs=-1, backend=\"loky\")(delayed(run_storm_task)(*args) for args in task_args)\n\n    df_result = pd.DataFrame(results)\n    df_result.to_csv(result_file, index=False)"
  },
  {
    "objectID": "06-damage-simulation.html#load-baseline-data",
    "href": "06-damage-simulation.html#load-baseline-data",
    "title": "Damage Simulation",
    "section": "1 Load baseline data",
    "text": "1 Load baseline data\n\nG = load_graph()\n\ngdf_nodes = gpd.GeoDataFrame(\n    {\n        \"osmid\": G.vs[\"osmid\"],\n        \"geometry\": [Point(v[\"x\"], v[\"y\"]) for v in G.vs],\n    },\n    crs=\"EPSG:4326\",\n)\ngdf_nodes = gdf_nodes.set_index(\"osmid\")\n\nswath_files = glob(os.path.join(SWATHS_DIR, \"*.gpkg\"))\ngdf_swaths = pd.concat([gpd.read_file(f) for f in swath_files], ignore_index=True).head(N_STORMS)\nnodes_in_swaths = gpd.sjoin(gdf_nodes, gdf_swaths, how=\"inner\", predicate=\"within\")\n\ndf_centrality = pd.read_csv(CENTRALITY_FILE).set_index(\"osmid\")\ndf_travel_times = pd.read_csv(TRAVEL_TIMES_FILE)\nbase_travel_times = df_travel_times[\"travel_time\"].values\norigin_nodes = df_travel_times[\"origin_node\"].values\ndestination_nodes = df_travel_times[\"destination_node\"].values"
  },
  {
    "objectID": "06-damage-simulation.html#run-simulation",
    "href": "06-damage-simulation.html#run-simulation",
    "title": "Damage Simulation",
    "section": "2 Run simulation",
    "text": "2 Run simulation\n\nstorms_done = {\n    match.group(1)\n    for f in glob(os.path.join(RESULTS_DIR, \"storm_*.csv\"))\n    if (match := re.search(r\"storm_(.+)\\.csv$\", f))\n}\n\nstorms_all = gdf_swaths[\"SID\"].unique()\nstorms_pending = [sid for sid in storms_all if sid not in storms_done]\n\nfor sid in tqdm(storms_pending, desc=\"Simulating storms\"):\n    process_storm(\n        sid,\n        nodes_in_swaths,\n        df_centrality,\n        origin_nodes,\n        destination_nodes,\n        base_travel_times,\n        G,\n    )"
  },
  {
    "objectID": "06-damage-simulation.html#analyze-results",
    "href": "06-damage-simulation.html#analyze-results",
    "title": "Damage Simulation",
    "section": "3 Analyze results",
    "text": "3 Analyze results\n\ndf_results = pd.concat(\n    (pd.read_csv(f) for f in glob(os.path.join(RESULTS_DIR, \"storm_*.csv\"))),\n    ignore_index=True,\n)\n\ndf_results_agg = df_results.groupby([\"node_removal_strategy\", \"damage_level\"])\ndf_results_agg = df_results_agg[\"delivery_efficiency\"].mean().round(3).reset_index()\n\ndf_results_agg.to_csv(os.path.join(BASE_PATH, \"simulation_results.csv\"), index=False)\n\n\nplt.style.use(\"seaborn-v0_8-whitegrid\")\n_, ax = plt.subplots(figsize=(10, 6))\n\nsns.lineplot(\n    data=df_results,\n    x=\"damage_level\",\n    y=\"delivery_efficiency\",\n    hue=\"node_removal_strategy\",\n    ax=ax,\n    linewidth=2,\n    hue_order=[\"betweenness\", \"degree\", \"closeness\", \"random\"],\n    errorbar=(\"ci\", 75),\n    marker=\"o\",\n)\n\nax.set_title(\"Relief Delivery Efficiency Under Different Node Removal Strategies\", fontsize=13)\nax.set_xlabel(\"% Nodes Damaged Within a Given Swath (D)\", fontsize=12)\nax.set_ylabel(\"Mean Relief Delivery Efficiency (e)\", fontsize=12)\nax.set_xscale(\"log\")\nax.set_xticks(DAMAGE_LEVELS, labels=DAMAGE_LEVELS)\nax.set_xlim(left=0)\nax.set_ylim(bottom=0)\nax.legend(title=\"Node Removal Strategy\", title_fontsize=\"12\", fontsize=\"12\")\n\nplt.savefig(os.path.join(BASE_PATH, \"damage_simulation.png\"), dpi=300, bbox_inches=\"tight\")\nplt.tight_layout()\nplt.show()"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Gulugod ng Bicolandia",
    "section": "",
    "text": "This research addresses the vulnerability of transportation network in the disaster-prone Bicol peninsula of the Philippines. The central question is how to identify the most critical infrastructure within this complex network to ensure the efficiency of relief operations during and after a catastrophic event. This study matters because it provides a data-driven methodology for prioritizing infrastructure investment and pre-positioning disaster response resources, moving beyond generalized risk assessments to a targeted, network-aware strategy. The approach involved constructing a comprehensive multi-modal transport graph of the region’s 114 municipalities, integrating road and ferry data. We then simulated network disruptions by systematically removing nodes within 671 historical storm swaths, guided by centrality metrics (betweenness, degree, closeness) to measure the resulting decline in logistical efficiency. The analysis revealed that the network’s integrity is disproportionately dependent on a small subset of nodes with high betweenness centrality, which function as critical bridges. The targeted removal of just 1-2% of these nodes triggered a catastrophic failure in delivery efficiency, while the removal of other node types had a far less severe impact. These findings provide a crucial evidence base for policymakers, enabling a shift toward targeted infrastructure hardening. By identifying and mapping the specific corridors most vital to regional connectivity—primarily in the provinces of Camarines Sur and Albay—this research offers a precise framework for enhancing resilience and optimizing humanitarian logistics in the face of recurring natural disasters."
  },
  {
    "objectID": "index.html#identifying-critical-corridors-in-the-bicol-transport-network-for-typhoon-resilience",
    "href": "index.html#identifying-critical-corridors-in-the-bicol-transport-network-for-typhoon-resilience",
    "title": "Gulugod ng Bicolandia",
    "section": "",
    "text": "This research addresses the vulnerability of transportation network in the disaster-prone Bicol peninsula of the Philippines. The central question is how to identify the most critical infrastructure within this complex network to ensure the efficiency of relief operations during and after a catastrophic event. This study matters because it provides a data-driven methodology for prioritizing infrastructure investment and pre-positioning disaster response resources, moving beyond generalized risk assessments to a targeted, network-aware strategy. The approach involved constructing a comprehensive multi-modal transport graph of the region’s 114 municipalities, integrating road and ferry data. We then simulated network disruptions by systematically removing nodes within 671 historical storm swaths, guided by centrality metrics (betweenness, degree, closeness) to measure the resulting decline in logistical efficiency. The analysis revealed that the network’s integrity is disproportionately dependent on a small subset of nodes with high betweenness centrality, which function as critical bridges. The targeted removal of just 1-2% of these nodes triggered a catastrophic failure in delivery efficiency, while the removal of other node types had a far less severe impact. These findings provide a crucial evidence base for policymakers, enabling a shift toward targeted infrastructure hardening. By identifying and mapping the specific corridors most vital to regional connectivity—primarily in the provinces of Camarines Sur and Albay—this research offers a precise framework for enhancing resilience and optimizing humanitarian logistics in the face of recurring natural disasters."
  },
  {
    "objectID": "04-travel-times.html",
    "href": "04-travel-times.html",
    "title": "Baseline Travel Times",
    "section": "",
    "text": "This notebook calculates the baseline travel times for relief delivery. It assigns travel speeds to different road and ferry types to compute the shortest travel time from a central relief hub to every town center."
  },
  {
    "objectID": "04-travel-times.html#setup-environment",
    "href": "04-travel-times.html#setup-environment",
    "title": "Baseline Travel Times",
    "section": "0 Setup environment",
    "text": "0 Setup environment\n\nimport os\n\nimport contextily as cx\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nimport networkx as nx\nimport osmnx as ox\nimport pandas as pd\n\n\nBASE_PATH = \"data\"\nBOUNDARIES_FILE = os.path.join(BASE_PATH, \"boundaries.gpkg\")\nMERGED_NETWORK_FILE = os.path.join(BASE_PATH, \"merged_network_simplified.graphml\")\nTOWN_CENTERS_FILE = os.path.join(BASE_PATH, \"town_centers.csv\")\n\n# Coordinates of the relief center at DSWD Field Office V\nORIGIN_COORDINATES = {\"lat\": 13.167815977098387, \"lon\": 123.75239324178186}"
  },
  {
    "objectID": "04-travel-times.html#load-and-visualize-town-center-coordinates",
    "href": "04-travel-times.html#load-and-visualize-town-center-coordinates",
    "title": "Baseline Travel Times",
    "section": "1 Load and visualize town center coordinates",
    "text": "1 Load and visualize town center coordinates\n\ndf_town_centers = pd.read_csv(TOWN_CENTERS_FILE, usecols=[\"town\", \"province\", \"lat\", \"lon\"])\ndf_town_centers = df_town_centers.dropna()\ndf_town_centers.head()\n\n\n\n\n\n\n\n\ntown\nprovince\nlat\nlon\n\n\n\n\n0\nBacacay\nAlbay\n13.294276\n123.793023\n\n\n1\nCamalig\nAlbay\n13.182025\n123.655650\n\n\n2\nDaraga\nAlbay\n13.149120\n123.713038\n\n\n3\nGuinobatan\nAlbay\n13.191479\n123.599313\n\n\n4\nJovellar\nAlbay\n13.072732\n123.598350\n\n\n\n\n\n\n\n\n_, ax = plt.subplots(figsize=(8, 8))\n\ngdf_boundaries = gpd.read_file(BOUNDARIES_FILE)\ngdf_boundaries.plot(ax=ax, edgecolor=\"gray\", linewidth=0.5, facecolor=\"none\")\n\nax.scatter(df_town_centers[\"lon\"], df_town_centers[\"lat\"], c=\"firebrick\", s=20, label=\"Town Centers\")\nax.scatter(ORIGIN_COORDINATES[\"lon\"], ORIGIN_COORDINATES[\"lat\"], c=\"blue\", s=20, label=\"Relief Center\")\n\nx_min, y_min, x_max, y_max = gdf_boundaries.total_bounds\npadding = 0.1\nax.set_xlim(x_min - padding, x_max + padding)\nax.set_ylim(y_min - padding, y_max + padding)\n\ncx.add_basemap(ax, crs=gdf_boundaries.crs, source=cx.providers.CartoDB.Positron, attribution=\"\")\n\nplt.title(\"Relief and Town Centers in Bicol Region\")\nplt.tight_layout()\nplt.axis(\"off\")\nplt.legend(loc=\"upper right\")\n\nfilepath = os.path.join(BASE_PATH, \"town_centers.png\")\nplt.savefig(filepath, dpi=300, bbox_inches=\"tight\")\n\nplt.show()"
  },
  {
    "objectID": "04-travel-times.html#reclassify-roads-and-assign-speed-limits",
    "href": "04-travel-times.html#reclassify-roads-and-assign-speed-limits",
    "title": "Baseline Travel Times",
    "section": "2 Reclassify roads and assign speed limits",
    "text": "2 Reclassify roads and assign speed limits\n\ndef reclassify_road(highway_attr):\n    road_type = str(highway_attr)\n\n    if road_type.endswith(\"_link\"):\n        road_type = road_type.replace(\"_link\", \"\")\n\n    if road_type in [\"trunk\", \"primary\"]:\n        return \"National Primary\"\n    elif road_type == \"secondary\":\n        return \"National Secondary\"\n    elif road_type == \"tertiary\":\n        return \"Provincial/Municipal\"\n    else:\n        return \"Barangay/Crowded\"\n\n\ndef add_speed_and_segment_time(graph):\n    # See R.A. 4136 for Philippine road speed limits.\n    speed_limits_kmh = {\n        \"National Primary\": 50,\n        \"National Secondary\": 50,\n        \"Provincial/Municipal\": 30,\n        \"Barangay/Crowded\": 20,\n        \"ferry\": 17,\n    }\n\n    highway_attrs = {}\n    maxspeed_attrs = {}\n    segment_time_attrs = {}\n\n    for u, v, key, data in graph.edges(keys=True, data=True):\n        edge = (u, v, key)\n        mode = data.get(\"mode\", \"road\")\n        length_m = data[\"length\"]\n        speed_kmh = 0\n\n        if mode == \"road\":\n            highway_type = data.get(\"highway\", \"unclassified\")\n            road_category = reclassify_road(highway_type)\n            highway_attrs[edge] = road_category\n\n            speed_kmh = speed_limits_kmh[road_category]\n            maxspeed_attrs[edge] = speed_kmh\n        else:\n            highway_attrs[edge] = \"ferry\"\n            speed_kmh = speed_limits_kmh[\"ferry\"]\n            maxspeed_attrs[edge] = speed_kmh\n\n        if speed_kmh &gt; 0:\n            segment_time = (length_m / 1000) / speed_kmh * 60\n            segment_time_attrs[edge] = segment_time\n\n    nx.set_edge_attributes(graph, highway_attrs, \"highway\")\n    nx.set_edge_attributes(graph, maxspeed_attrs, \"maxspeed\")\n    nx.set_edge_attributes(graph, segment_time_attrs, \"segment_time\")\n\n    return graph\n\n\ngraph_transport = ox.load_graphml(MERGED_NETWORK_FILE)\ngraph_transport_weighted = add_speed_and_segment_time(graph_transport.copy())\n\ngdf_transport_edges = ox.graph_to_gdfs(graph_transport_weighted, nodes=False, edges=True).reset_index()\ngdf_transport_edges.groupby(\"highway\").agg({\"segment_time\": \"mean\", \"length\": \"mean\"})\n\n\n\n\n\n\n\n\nsegment_time\nlength\n\n\nhighway\n\n\n\n\n\n\nBarangay/Crowded\n0.607657\n202.552363\n\n\nNational Primary\n0.344122\n286.768579\n\n\nNational Secondary\n0.414054\n345.045236\n\n\nProvincial/Municipal\n0.831879\n415.939677\n\n\nferry\n7.906164\n2240.079754\n\n\n\n\n\n\n\n\nfilepath = os.path.join(BASE_PATH, \"merged_network_weighted.graphml\")\nox.save_graphml(graph_transport_weighted, filepath)"
  },
  {
    "objectID": "04-travel-times.html#find-nearest-network-nodes",
    "href": "04-travel-times.html#find-nearest-network-nodes",
    "title": "Baseline Travel Times",
    "section": "3 Find nearest network nodes",
    "text": "3 Find nearest network nodes\n\ndf_town_centers[\"origin_node\"] = ox.nearest_nodes(\n    graph_transport_weighted,\n    X=[ORIGIN_COORDINATES[\"lon\"]],\n    Y=[ORIGIN_COORDINATES[\"lat\"]],\n)[0]\n\ndf_town_centers[\"destination_node\"] = ox.nearest_nodes(\n    graph_transport,\n    X=df_town_centers[\"lon\"],\n    Y=df_town_centers[\"lat\"],\n)\n\ndf_town_centers.head()\n\n\n\n\n\n\n\n\ntown\nprovince\nlat\nlon\norigin_node\ndestination_node\n\n\n\n\n0\nBacacay\nAlbay\n13.294276\n123.793023\n7700895122\n1072640482\n\n\n1\nCamalig\nAlbay\n13.182025\n123.655650\n7700895122\n3958193431\n\n\n2\nDaraga\nAlbay\n13.149120\n123.713038\n7700895122\n9128688734\n\n\n3\nGuinobatan\nAlbay\n13.191479\n123.599313\n7700895122\n1746976936\n\n\n4\nJovellar\nAlbay\n13.072732\n123.598350\n7700895122\n5952690700"
  },
  {
    "objectID": "04-travel-times.html#compute-travel-time-from-origin-to-all-town-centers",
    "href": "04-travel-times.html#compute-travel-time-from-origin-to-all-town-centers",
    "title": "Baseline Travel Times",
    "section": "4 Compute travel time from origin to all town centers",
    "text": "4 Compute travel time from origin to all town centers\n\ntravel_times = nx.single_source_dijkstra_path_length(\n    graph_transport_weighted,\n    source=df_town_centers[\"origin_node\"][0],\n    weight=\"segment_time\",\n)\n\ndf_town_centers[\"travel_time\"] = df_town_centers[\"destination_node\"].map(travel_times)\n\n\nmissing_travel_times = df_town_centers[\"travel_time\"].isna()\n\nif missing_travel_times.any():\n    print(df_town_centers[missing_travel_times][[\"town\", \"province\", \"destination_node\"]])\n    raise ValueError(\"Some travel times could not be calculated. Check the nodes.\")\n\n\nprint(\"\\n--- Fastest to Reach Town Centers ---\")\ncols = [\"town\", \"province\", \"travel_time\"]\ndf_town_centers[cols].sort_values(\"travel_time\").head(10)\n\n\n--- Fastest to Reach Town Centers ---\n\n\n\n\n\n\n\n\n\ntown\nprovince\ntravel_time\n\n\n\n\n5\nLegazpi City\nAlbay\n6.636242\n\n\n2\nDaraga\nAlbay\n8.232893\n\n\n15\nSanto Domingo\nAlbay\n11.975125\n\n\n1\nCamalig\nAlbay\n17.423472\n\n\n8\nMalilipot\nAlbay\n22.400124\n\n\n0\nBacacay\nAlbay\n22.722983\n\n\n3\nGuinobatan\nAlbay\n25.559240\n\n\n16\nTabaco City\nAlbay\n28.082637\n\n\n9\nMalinao\nAlbay\n34.188701\n\n\n7\nLigao City\nAlbay\n37.512479\n\n\n\n\n\n\n\n\nprint(\"\\n--- Slowest to Reach Town Centers ---\")\ndf_town_centers[cols].sort_values(\"travel_time\", ascending=False).head(10)\n\n\n--- Slowest to Reach Town Centers ---\n\n\n\n\n\n\n\n\n\ntown\nprovince\ntravel_time\n\n\n\n\n86\nEsperanza\nMasbate\n414.369883\n\n\n93\nPio V. Corpus\nMasbate\n389.273222\n\n\n94\nPlacer\nMasbate\n381.709909\n\n\n82\nCataingan\nMasbate\n368.608978\n\n\n83\nCawayan\nMasbate\n353.333664\n\n\n80\nBalud\nMasbate\n351.095413\n\n\n92\nPalanas\nMasbate\n343.771116\n\n\n85\nDimasalang\nMasbate\n332.596236\n\n\n98\nUson\nMasbate\n328.263383\n\n\n27\nSanta Elena\nCamarines Norte\n315.355481\n\n\n\n\n\n\n\n\nfilepath = os.path.join(BASE_PATH, \"travel_times.csv\")\ndf_town_centers.to_csv(filepath, index=False)\n\n\nimport matplotlib.cm as cm\nimport matplotlib.colors as colors\nimport networkx as nx\nimport osmnx as ox\n\n\ndef plot_shortest_paths(G, df_routes, ax):\n    routes = []\n    travel_times = []\n\n    for _, row in df_routes.iterrows():\n        origin_node = row[\"origin_node\"]\n        dest_node = row[\"destination_node\"]\n        try:\n            route = nx.shortest_path(G, source=origin_node, target=dest_node, weight=\"segment_time\")\n            routes.append(route)\n            travel_times.append(row[\"travel_time\"])\n        except nx.NetworkXNoPath:\n            continue\n\n    if not travel_times:\n        return\n\n    min_time = min(travel_times)\n    max_time = max(travel_times)\n    norm = colors.Normalize(vmin=min_time, vmax=max_time)\n    cmap = cm.get_cmap(\"plasma\")\n    route_colors = [cmap(norm(time)) for time in travel_times]\n\n    ox.plot_graph_routes(\n        G, routes, route_colors=route_colors, route_linewidth=1.5, node_size=0, ax=ax, show=False, close=False\n    )\n\n    sm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\n    sm.set_array([])\n    cbar = plt.colorbar(sm, ax=ax, orientation=\"horizontal\", pad=0.01, shrink=0.5)\n    cbar.set_label(\"Travel Time (minutes)\")\n\n\nfig, ax = plt.subplots(figsize=(8, 8))\n\ngdf_boundaries = gpd.read_file(BOUNDARIES_FILE)\ngdf_boundaries.plot(ax=ax, edgecolor=\"gray\", linewidth=0.5, facecolor=\"none\", zorder=2)\n\nplot_shortest_paths(graph_transport_weighted, df_town_centers, ax=ax)\n\ncx.add_basemap(ax, crs=gdf_boundaries.crs, source=cx.providers.CartoDB.Positron, attribution=\"\", zorder=1)\n\nax.set_title(\"Shortest Travel Routes from Relief Center to Town Centers\")\nax.set_axis_off()\nplt.tight_layout()\n\nfilepath = os.path.join(BASE_PATH, \"shortest_paths_map.png\")\nplt.savefig(filepath, dpi=300, bbox_inches=\"tight\")\nplt.show()\n\n/tmp/ipykernel_22816/975657725.py:34: MatplotlibDeprecationWarning: The get_cmap function was deprecated in Matplotlib 3.7 and will be removed in 3.11. Use ``matplotlib.colormaps[name]`` or ``matplotlib.colormaps.get_cmap()`` or ``pyplot.get_cmap()`` instead.\n  cmap = cm.get_cmap(\"plasma\")\n/home/ainz/Code/transport-network-analysis/.venv/lib64/python3.13/site-packages/osmnx/plot.py:351: UserWarning: *c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n  ax.scatter(od_x, od_y, s=orig_dest_size, c=route_color, alpha=route_alpha, edgecolor=\"none\")"
  }
]